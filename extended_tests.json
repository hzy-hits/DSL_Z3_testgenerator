{
  "metadata": {
    "domain": "派单系统架构",
    "generation_time": "2025-07-14T17:16:47.635936",
    "generator_version": "v8_extended",
    "total_tests": 101,
    "total_entities": 8,
    "total_state_machines": 3,
    "total_test_requirements": 0
  },
  "summary": {
    "test_types": {
      "functional": 24,
      "boundary": 32,
      "negative": 16,
      "constraint_satisfaction": 8,
      "scenario": 21
    },
    "entities": {
      "ReserveOrder": 15,
      "ServiceOrder": 14,
      "DispatchOrder": 14,
      "TakeOrderRecord": 15,
      "ServiceProvider": 10,
      "TimeSlot": 10,
      "DispatchEvent": 13,
      "Notification": 10
    },
    "priorities": {
      "8": 24,
      "7": 32,
      "6": 24,
      "9": 21
    },
    "coverage": {
      "state_coverage": 100.0,
      "transition_coverage": 100.0,
      "rule_coverage": 100.0,
      "constraint_coverage": 100.0,
      "requirement_coverage": 0.0
    }
  },
  "tests": [
    {
      "test_id": "ReserveOrder_functional_1",
      "test_name": "ReserveOrder_functional_1",
      "test_type": "functional",
      "description": "Test basic functionality of ReserveOrder",
      "test_data": {
        "reserve_order_id": 10001,
        "reserve_status": 1,
        "user_id": 10001,
        "service_time_minutes": 17,
        "service_address_id": 10001,
        "is_modified": true,
        "minutes_since_created": 5
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634604",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_functional_1",
      "test_name": "ReserveOrder_functional_2",
      "test_type": "functional",
      "description": "Test basic functionality of ReserveOrder",
      "test_data": {
        "reserve_order_id": 10002,
        "reserve_status": 6,
        "user_id": 10002,
        "service_time_minutes": 23,
        "service_address_id": 10002,
        "is_modified": true,
        "minutes_since_created": 55
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634607",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_functional_1",
      "test_name": "ReserveOrder_functional_3",
      "test_type": "functional",
      "description": "Test basic functionality of ReserveOrder",
      "test_data": {
        "reserve_order_id": 10003,
        "reserve_status": 5,
        "user_id": 10004,
        "service_time_minutes": 53,
        "service_address_id": 10003,
        "is_modified": true,
        "minutes_since_created": 88
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634609",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_boundary_1",
      "test_name": "ReserveOrder_reserve_order_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for reserve_order_id",
      "test_data": {
        "reserve_order_id": 0,
        "reserve_status": 2,
        "user_id": 10005,
        "service_time_minutes": 86,
        "service_address_id": 10004,
        "is_modified": true,
        "minutes_since_created": 5
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634610",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_boundary_1",
      "test_name": "ReserveOrder_reserve_order_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for reserve_order_id",
      "test_data": {
        "reserve_order_id": 999999,
        "reserve_status": 6,
        "user_id": 10006,
        "service_time_minutes": 11,
        "service_address_id": 10005,
        "is_modified": false,
        "minutes_since_created": 50
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634610",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_boundary_1",
      "test_name": "ReserveOrder_reserve_status_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for reserve_status",
      "test_data": {
        "reserve_order_id": 10006,
        "reserve_status": 0,
        "user_id": 10007,
        "service_time_minutes": 40,
        "service_address_id": 10006,
        "is_modified": true,
        "minutes_since_created": 51
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634611",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_boundary_1",
      "test_name": "ReserveOrder_reserve_status_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for reserve_status",
      "test_data": {
        "reserve_order_id": 10007,
        "reserve_status": 999999,
        "user_id": 10008,
        "service_time_minutes": 69,
        "service_address_id": 10007,
        "is_modified": true,
        "minutes_since_created": 83
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634612",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_negative_1",
      "test_name": "ReserveOrder_reserve_order_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for reserve_order_id",
      "test_data": {
        "reserve_order_id": "not_a_number",
        "reserve_status": 1,
        "user_id": 10009,
        "service_time_minutes": 85,
        "service_address_id": 10008,
        "is_modified": false,
        "minutes_since_created": 13
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634612",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "ReserveOrder_negative_1",
      "test_name": "ReserveOrder_reserve_status_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for reserve_status",
      "test_data": {
        "reserve_order_id": 10009,
        "reserve_status": "not_a_number",
        "user_id": 10010,
        "service_time_minutes": 3,
        "service_address_id": 10009,
        "is_modified": true,
        "minutes_since_created": 49
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634613",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "ReserveOrder_constraint_satisfaction_1",
      "test_name": "ReserveOrder_reserve_order_id_positive_constraint",
      "test_type": "constraint_satisfaction",
      "description": "Test implicit positive constraint for reserve_order_id",
      "test_data": {
        "reserve_order_id": 10010,
        "reserve_status": 1,
        "user_id": 10011,
        "service_time_minutes": 23,
        "service_address_id": 10010,
        "is_modified": true,
        "minutes_since_created": 65
      },
      "expected_result": "pass",
      "priority": 6,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634613",
      "constraint": "reserve_order_id >= 0",
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_scenario_1",
      "test_name": "ReserveOrder_scenario_complete_dispatch_flow",
      "test_type": "scenario",
      "description": "完整的派单流程测试：从创建预约到派单成功",
      "test_data": {
        "scenario_name": "complete_dispatch_flow",
        "initial_state": {},
        "steps": [
          {
            "action": "创建新的预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 180
            },
            "expected_result": {
              "reserve_order_created": true
            }
          },
          {
            "action": "系统自动派单",
            "entity": "DispatchOrder",
            "timing": 5,
            "state_change": {
              "dispatch_status": 2,
              "dispatch_type": 1
            },
            "expected_result": {
              "dispatch_success": true,
              "notification_sent": true
            }
          },
          {
            "action": "服务人员查看订单",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "record_status": 2,
              "view_time_minutes": 10
            },
            "expected_result": {
              "order_viewed": true
            }
          },
          {
            "action": "服务人员确认接单",
            "entity": "TakeOrderRecord",
            "timing": 15,
            "state_change": {
              "record_status": 3
            },
            "expected_result": {
              "order_accepted": true,
              "inventory_updated": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634614",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_scenario_1",
      "test_name": "ReserveOrder_scenario_order_complete_lifecycle",
      "test_type": "scenario",
      "description": "订单完整生命周期测试：从创建到完成",
      "test_data": {
        "scenario_name": "order_complete_lifecycle",
        "initial_state": {},
        "steps": [
          {
            "action": "创建订单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "order_status": 1
            },
            "expected_result": {}
          },
          {
            "action": "派单成功",
            "entity": "ReserveOrder",
            "timing": 10,
            "state_change": {
              "order_status": 2
            },
            "expected_result": {}
          },
          {
            "action": "服务人员接单",
            "entity": "ReserveOrder",
            "timing": 20,
            "state_change": {
              "order_status": 3
            },
            "expected_result": {}
          },
          {
            "action": "开始服务",
            "entity": "ReserveOrder",
            "timing": 180,
            "state_change": {
              "order_status": 4
            },
            "expected_result": {}
          },
          {
            "action": "完成服务",
            "entity": "ReserveOrder",
            "timing": 240,
            "state_change": {
              "order_status": 5
            },
            "expected_result": {}
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634615",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_scenario_1",
      "test_name": "ReserveOrder_scenario_order_modification_flow",
      "test_type": "scenario",
      "description": "用户修改预约时间的完整流程",
      "test_data": {
        "scenario_name": "order_modification_flow",
        "initial_state": {},
        "steps": [
          {
            "action": "原始预约已派单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 2,
              "service_time_minutes": 180
            },
            "expected_result": {}
          },
          {
            "action": "用户请求修改时间",
            "entity": "ReserveOrder",
            "timing": 30,
            "state_change": {
              "is_modified": true,
              "service_time_minutes": 240
            },
            "expected_result": {
              "modification_allowed": true
            }
          },
          {
            "action": "系统评估是否需要换人",
            "entity": "DispatchOrder",
            "timing": 31,
            "state_change": {
              "is_reassignment": true
            },
            "expected_result": {
              "provider_evaluation_complete": true
            }
          },
          {
            "action": "通知相关人员",
            "entity": "Notification",
            "timing": 32,
            "state_change": {
              "message_type": 4,
              "is_sent": true
            },
            "expected_result": {
              "notifications_sent": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634615",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_scenario_1",
      "test_name": "ReserveOrder_scenario_dispatch_timeout_handling",
      "test_type": "scenario",
      "description": "派单超时自动处理流程",
      "test_data": {
        "scenario_name": "dispatch_timeout_handling",
        "initial_state": {},
        "steps": [
          {
            "action": "创建预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 90
            },
            "expected_result": {}
          },
          {
            "action": "等待10分钟未派单",
            "entity": "DispatchOrder",
            "timing": 11,
            "state_change": {
              "dispatch_status": 1,
              "minutes_since_created": 11
            },
            "expected_result": {
              "timeout_notification_sent": true
            }
          },
          {
            "action": "继续等待至服务前1小时",
            "entity": "DispatchOrder",
            "timing": 31,
            "state_change": {
              "service_time_minutes": 59
            },
            "expected_result": {}
          },
          {
            "action": "系统自动取消",
            "entity": "DispatchOrder",
            "timing": 32,
            "state_change": {
              "dispatch_status": 6
            },
            "expected_result": {
              "auto_cancelled": true,
              "cancel_notification_sent": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634616",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ReserveOrder_scenario_1",
      "test_name": "ReserveOrder_scenario_ReserveOrderFlow_complete_lifecycle",
      "test_type": "scenario",
      "description": "Complete lifecycle test for ReserveOrderFlow",
      "test_data": {
        "scenario_name": "ReserveOrderFlow_complete_lifecycle",
        "initial_state": {},
        "steps": [
          {
            "action": "Execute transition: DispatchToProvider",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 2,
              "dispatch_status": 2
            },
            "expected_result": {}
          },
          {
            "action": "Execute transition: ProviderAccept",
            "entity": "ReserveOrder",
            "timing": 10,
            "state_change": {
              "reserve_status": 3,
              "record_status": 3
            },
            "expected_result": {}
          },
          {
            "action": "Execute transition: StartService",
            "entity": "ReserveOrder",
            "timing": 20,
            "state_change": {
              "reserve_status": 4,
              "actual_start_time_minutes": 10
            },
            "expected_result": {}
          },
          {
            "action": "Execute transition: CompleteService",
            "entity": "ReserveOrder",
            "timing": 30,
            "state_change": {
              "reserve_status": 5,
              "service_status": 3
            },
            "expected_result": {}
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ReserveOrder",
      "timestamp": "2025-07-14T17:16:47.634617",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_functional_16",
      "test_name": "ServiceOrder_functional_1",
      "test_type": "functional",
      "description": "Test basic functionality of ServiceOrder",
      "test_data": {
        "service_order_id": 10001,
        "reserve_order_id": 10001,
        "service_status": 2,
        "provider_id": 10001,
        "actual_start_time_minutes": 19
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634785",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_functional_16",
      "test_name": "ServiceOrder_functional_2",
      "test_type": "functional",
      "description": "Test basic functionality of ServiceOrder",
      "test_data": {
        "service_order_id": 10003,
        "reserve_order_id": 10002,
        "service_status": 1,
        "provider_id": 10002,
        "actual_start_time_minutes": 39
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634786",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_functional_16",
      "test_name": "ServiceOrder_functional_3",
      "test_type": "functional",
      "description": "Test basic functionality of ServiceOrder",
      "test_data": {
        "service_order_id": 10004,
        "reserve_order_id": 10003,
        "service_status": 3,
        "provider_id": 10003,
        "actual_start_time_minutes": 56
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634787",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_boundary_16",
      "test_name": "ServiceOrder_service_order_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for service_order_id",
      "test_data": {
        "service_order_id": 0,
        "reserve_order_id": 10004,
        "service_status": 2,
        "provider_id": 10004,
        "actual_start_time_minutes": 94
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634788",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_boundary_16",
      "test_name": "ServiceOrder_service_order_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for service_order_id",
      "test_data": {
        "service_order_id": 999999,
        "reserve_order_id": 10005,
        "service_status": 4,
        "provider_id": 10005,
        "actual_start_time_minutes": 17
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634788",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_boundary_16",
      "test_name": "ServiceOrder_reserve_order_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for reserve_order_id",
      "test_data": {
        "service_order_id": 10007,
        "reserve_order_id": 0,
        "service_status": 5,
        "provider_id": 10006,
        "actual_start_time_minutes": 32
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634789",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_boundary_16",
      "test_name": "ServiceOrder_reserve_order_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for reserve_order_id",
      "test_data": {
        "service_order_id": 10008,
        "reserve_order_id": 999999,
        "service_status": 2,
        "provider_id": 10007,
        "actual_start_time_minutes": 76
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634790",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_negative_16",
      "test_name": "ServiceOrder_service_order_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for service_order_id",
      "test_data": {
        "service_order_id": "not_a_number",
        "reserve_order_id": 10008,
        "service_status": 3,
        "provider_id": 10008,
        "actual_start_time_minutes": 95
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634790",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "ServiceOrder_negative_16",
      "test_name": "ServiceOrder_reserve_order_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for reserve_order_id",
      "test_data": {
        "service_order_id": 10010,
        "reserve_order_id": "not_a_number",
        "service_status": 2,
        "provider_id": 10009,
        "actual_start_time_minutes": 9
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634791",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "ServiceOrder_constraint_satisfaction_16",
      "test_name": "ServiceOrder_service_order_id_positive_constraint",
      "test_type": "constraint_satisfaction",
      "description": "Test implicit positive constraint for service_order_id",
      "test_data": {
        "service_order_id": 10011,
        "reserve_order_id": 10010,
        "service_status": 2,
        "provider_id": 10010,
        "actual_start_time_minutes": 33
      },
      "expected_result": "pass",
      "priority": 6,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634792",
      "constraint": "service_order_id >= 0",
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_scenario_16",
      "test_name": "ServiceOrder_scenario_complete_dispatch_flow",
      "test_type": "scenario",
      "description": "完整的派单流程测试：从创建预约到派单成功",
      "test_data": {
        "scenario_name": "complete_dispatch_flow",
        "initial_state": {},
        "steps": [
          {
            "action": "创建新的预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 180
            },
            "expected_result": {
              "reserve_order_created": true
            }
          },
          {
            "action": "系统自动派单",
            "entity": "DispatchOrder",
            "timing": 5,
            "state_change": {
              "dispatch_status": 2,
              "dispatch_type": 1
            },
            "expected_result": {
              "dispatch_success": true,
              "notification_sent": true
            }
          },
          {
            "action": "服务人员查看订单",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "record_status": 2,
              "view_time_minutes": 10
            },
            "expected_result": {
              "order_viewed": true
            }
          },
          {
            "action": "服务人员确认接单",
            "entity": "TakeOrderRecord",
            "timing": 15,
            "state_change": {
              "record_status": 3
            },
            "expected_result": {
              "order_accepted": true,
              "inventory_updated": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634792",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_scenario_16",
      "test_name": "ServiceOrder_scenario_order_complete_lifecycle",
      "test_type": "scenario",
      "description": "订单完整生命周期测试：从创建到完成",
      "test_data": {
        "scenario_name": "order_complete_lifecycle",
        "initial_state": {},
        "steps": [
          {
            "action": "创建订单",
            "entity": "ServiceOrder",
            "timing": 0,
            "state_change": {
              "order_status": 1
            },
            "expected_result": {}
          },
          {
            "action": "派单成功",
            "entity": "ServiceOrder",
            "timing": 10,
            "state_change": {
              "order_status": 2
            },
            "expected_result": {}
          },
          {
            "action": "服务人员接单",
            "entity": "ServiceOrder",
            "timing": 20,
            "state_change": {
              "order_status": 3
            },
            "expected_result": {}
          },
          {
            "action": "开始服务",
            "entity": "ServiceOrder",
            "timing": 180,
            "state_change": {
              "order_status": 4
            },
            "expected_result": {}
          },
          {
            "action": "完成服务",
            "entity": "ServiceOrder",
            "timing": 240,
            "state_change": {
              "order_status": 5
            },
            "expected_result": {}
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634793",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_scenario_16",
      "test_name": "ServiceOrder_scenario_order_modification_flow",
      "test_type": "scenario",
      "description": "用户修改预约时间的完整流程",
      "test_data": {
        "scenario_name": "order_modification_flow",
        "initial_state": {},
        "steps": [
          {
            "action": "原始预约已派单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 2,
              "service_time_minutes": 180
            },
            "expected_result": {}
          },
          {
            "action": "用户请求修改时间",
            "entity": "ReserveOrder",
            "timing": 30,
            "state_change": {
              "is_modified": true,
              "service_time_minutes": 240
            },
            "expected_result": {
              "modification_allowed": true
            }
          },
          {
            "action": "系统评估是否需要换人",
            "entity": "DispatchOrder",
            "timing": 31,
            "state_change": {
              "is_reassignment": true
            },
            "expected_result": {
              "provider_evaluation_complete": true
            }
          },
          {
            "action": "通知相关人员",
            "entity": "Notification",
            "timing": 32,
            "state_change": {
              "message_type": 4,
              "is_sent": true
            },
            "expected_result": {
              "notifications_sent": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634794",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceOrder_scenario_16",
      "test_name": "ServiceOrder_scenario_dispatch_timeout_handling",
      "test_type": "scenario",
      "description": "派单超时自动处理流程",
      "test_data": {
        "scenario_name": "dispatch_timeout_handling",
        "initial_state": {},
        "steps": [
          {
            "action": "创建预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 90
            },
            "expected_result": {}
          },
          {
            "action": "等待10分钟未派单",
            "entity": "DispatchOrder",
            "timing": 11,
            "state_change": {
              "dispatch_status": 1,
              "minutes_since_created": 11
            },
            "expected_result": {
              "timeout_notification_sent": true
            }
          },
          {
            "action": "继续等待至服务前1小时",
            "entity": "DispatchOrder",
            "timing": 31,
            "state_change": {
              "service_time_minutes": 59
            },
            "expected_result": {}
          },
          {
            "action": "系统自动取消",
            "entity": "DispatchOrder",
            "timing": 32,
            "state_change": {
              "dispatch_status": 6
            },
            "expected_result": {
              "auto_cancelled": true,
              "cancel_notification_sent": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "ServiceOrder",
      "timestamp": "2025-07-14T17:16:47.634794",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_functional_30",
      "test_name": "DispatchOrder_functional_1",
      "test_type": "functional",
      "description": "Test basic functionality of DispatchOrder",
      "test_data": {
        "dispatch_order_id": 10001,
        "reserve_order_id": 10001,
        "dispatch_status": 6,
        "dispatch_type": 3,
        "dispatch_time_minutes": 2,
        "is_reassignment": false,
        "provider_status": 1
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635123",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_functional_30",
      "test_name": "DispatchOrder_functional_2",
      "test_type": "functional",
      "description": "Test basic functionality of DispatchOrder",
      "test_data": {
        "dispatch_order_id": 10002,
        "reserve_order_id": 10002,
        "dispatch_status": 4,
        "dispatch_type": 2,
        "dispatch_time_minutes": 34,
        "is_reassignment": true,
        "provider_status": 2
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635125",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_functional_30",
      "test_name": "DispatchOrder_functional_3",
      "test_type": "functional",
      "description": "Test basic functionality of DispatchOrder",
      "test_data": {
        "dispatch_order_id": 10003,
        "reserve_order_id": 10003,
        "dispatch_status": 1,
        "dispatch_type": 2,
        "dispatch_time_minutes": 57,
        "is_reassignment": false,
        "provider_status": 2
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635126",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_boundary_30",
      "test_name": "DispatchOrder_dispatch_order_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for dispatch_order_id",
      "test_data": {
        "dispatch_order_id": 0,
        "reserve_order_id": 10004,
        "dispatch_status": 3,
        "dispatch_type": 3,
        "dispatch_time_minutes": 86,
        "is_reassignment": true,
        "provider_status": 4
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635126",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_boundary_30",
      "test_name": "DispatchOrder_dispatch_order_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for dispatch_order_id",
      "test_data": {
        "dispatch_order_id": 999999,
        "reserve_order_id": 10005,
        "dispatch_status": 5,
        "dispatch_type": 1,
        "dispatch_time_minutes": 20,
        "is_reassignment": false,
        "provider_status": 1
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635127",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_boundary_30",
      "test_name": "DispatchOrder_reserve_order_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for reserve_order_id",
      "test_data": {
        "dispatch_order_id": 10006,
        "reserve_order_id": 0,
        "dispatch_status": 3,
        "dispatch_type": 3,
        "dispatch_time_minutes": 37,
        "is_reassignment": true,
        "provider_status": 3
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635128",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_boundary_30",
      "test_name": "DispatchOrder_reserve_order_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for reserve_order_id",
      "test_data": {
        "dispatch_order_id": 10007,
        "reserve_order_id": 999999,
        "dispatch_status": 3,
        "dispatch_type": 2,
        "dispatch_time_minutes": 65,
        "is_reassignment": true,
        "provider_status": 4
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635129",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_negative_30",
      "test_name": "DispatchOrder_dispatch_order_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for dispatch_order_id",
      "test_data": {
        "dispatch_order_id": "not_a_number",
        "reserve_order_id": 10008,
        "dispatch_status": 4,
        "dispatch_type": 1,
        "dispatch_time_minutes": 97,
        "is_reassignment": true,
        "provider_status": 4
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635130",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "DispatchOrder_negative_30",
      "test_name": "DispatchOrder_reserve_order_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for reserve_order_id",
      "test_data": {
        "dispatch_order_id": 10009,
        "reserve_order_id": "not_a_number",
        "dispatch_status": 6,
        "dispatch_type": 3,
        "dispatch_time_minutes": 18,
        "is_reassignment": true,
        "provider_status": 4
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635130",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "DispatchOrder_constraint_satisfaction_30",
      "test_name": "DispatchOrder_dispatch_order_id_positive_constraint",
      "test_type": "constraint_satisfaction",
      "description": "Test implicit positive constraint for dispatch_order_id",
      "test_data": {
        "dispatch_order_id": 10010,
        "reserve_order_id": 10010,
        "dispatch_status": 2,
        "dispatch_type": 2,
        "dispatch_time_minutes": 32,
        "is_reassignment": true,
        "provider_status": 3
      },
      "expected_result": "pass",
      "priority": 6,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635131",
      "constraint": "dispatch_order_id >= 0",
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_scenario_30",
      "test_name": "DispatchOrder_scenario_complete_dispatch_flow",
      "test_type": "scenario",
      "description": "完整的派单流程测试：从创建预约到派单成功",
      "test_data": {
        "scenario_name": "complete_dispatch_flow",
        "initial_state": {},
        "steps": [
          {
            "action": "创建新的预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 180
            },
            "expected_result": {
              "reserve_order_created": true
            }
          },
          {
            "action": "系统自动派单",
            "entity": "DispatchOrder",
            "timing": 5,
            "state_change": {
              "dispatch_status": 2,
              "dispatch_type": 1
            },
            "expected_result": {
              "dispatch_success": true,
              "notification_sent": true
            }
          },
          {
            "action": "服务人员查看订单",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "record_status": 2,
              "view_time_minutes": 10
            },
            "expected_result": {
              "order_viewed": true
            }
          },
          {
            "action": "服务人员确认接单",
            "entity": "TakeOrderRecord",
            "timing": 15,
            "state_change": {
              "record_status": 3
            },
            "expected_result": {
              "order_accepted": true,
              "inventory_updated": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635132",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_scenario_30",
      "test_name": "DispatchOrder_scenario_rejection_and_reassignment",
      "test_type": "scenario",
      "description": "服务人员拒单及重新派单流程",
      "test_data": {
        "scenario_name": "rejection_and_reassignment",
        "initial_state": {},
        "steps": [
          {
            "action": "初始派单",
            "entity": "DispatchOrder",
            "timing": 0,
            "state_change": {
              "dispatch_status": 2,
              "service_time_minutes": 120
            },
            "expected_result": {}
          },
          {
            "action": "服务人员拒单",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "record_status": 4,
              "reject_reason": 1
            },
            "expected_result": {
              "dispatch_status": 4
            }
          },
          {
            "action": "系统重新派单",
            "entity": "DispatchOrder",
            "timing": 15,
            "state_change": {
              "dispatch_status": 2,
              "is_reassignment": true
            },
            "expected_result": {
              "new_provider_assigned": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635133",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_scenario_30",
      "test_name": "DispatchOrder_scenario_dispatch_timeout_handling",
      "test_type": "scenario",
      "description": "派单超时自动处理流程",
      "test_data": {
        "scenario_name": "dispatch_timeout_handling",
        "initial_state": {},
        "steps": [
          {
            "action": "创建预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 90
            },
            "expected_result": {}
          },
          {
            "action": "等待10分钟未派单",
            "entity": "DispatchOrder",
            "timing": 11,
            "state_change": {
              "dispatch_status": 1,
              "minutes_since_created": 11
            },
            "expected_result": {
              "timeout_notification_sent": true
            }
          },
          {
            "action": "继续等待至服务前1小时",
            "entity": "DispatchOrder",
            "timing": 31,
            "state_change": {
              "service_time_minutes": 59
            },
            "expected_result": {}
          },
          {
            "action": "系统自动取消",
            "entity": "DispatchOrder",
            "timing": 32,
            "state_change": {
              "dispatch_status": 6
            },
            "expected_result": {
              "auto_cancelled": true,
              "cancel_notification_sent": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635133",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchOrder_scenario_30",
      "test_name": "DispatchOrder_scenario_DispatchOrderFlow_complete_lifecycle",
      "test_type": "scenario",
      "description": "Complete lifecycle test for DispatchOrderFlow",
      "test_data": {
        "scenario_name": "DispatchOrderFlow_complete_lifecycle",
        "initial_state": {},
        "steps": [
          {
            "action": "Execute transition: SystemAutoDispatch",
            "entity": "DispatchOrder",
            "timing": 0,
            "state_change": {
              "dispatch_status": 2,
              "dispatch_type": 1,
              "provider_status": 1
            },
            "expected_result": {}
          },
          {
            "action": "Execute transition: RejectOrder",
            "entity": "DispatchOrder",
            "timing": 10,
            "state_change": {
              "dispatch_status": 4,
              "record_status": 4,
              "service_time_minutes": 70
            },
            "expected_result": {}
          },
          {
            "action": "Execute transition: Reassignment",
            "entity": "DispatchOrder",
            "timing": 20,
            "state_change": {
              "dispatch_status": 5,
              "is_reassignment": true
            },
            "expected_result": {}
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "DispatchOrder",
      "timestamp": "2025-07-14T17:16:47.635134",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_functional_44",
      "test_name": "TakeOrderRecord_functional_1",
      "test_type": "functional",
      "description": "Test basic functionality of TakeOrderRecord",
      "test_data": {
        "record_id": 10001,
        "dispatch_order_id": 10001,
        "provider_id": 10001,
        "record_status": 5,
        "view_time_minutes": 18,
        "reject_reason": 0
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635307",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_functional_44",
      "test_name": "TakeOrderRecord_functional_2",
      "test_type": "functional",
      "description": "Test basic functionality of TakeOrderRecord",
      "test_data": {
        "record_id": 10002,
        "dispatch_order_id": 10002,
        "provider_id": 10003,
        "record_status": 1,
        "view_time_minutes": 76,
        "reject_reason": 0
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635308",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_functional_44",
      "test_name": "TakeOrderRecord_functional_3",
      "test_type": "functional",
      "description": "Test basic functionality of TakeOrderRecord",
      "test_data": {
        "record_id": 10004,
        "dispatch_order_id": 10003,
        "provider_id": 10004,
        "record_status": 5,
        "view_time_minutes": 87,
        "reject_reason": 4
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635309",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_boundary_44",
      "test_name": "TakeOrderRecord_record_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for record_id",
      "test_data": {
        "record_id": 0,
        "dispatch_order_id": 10004,
        "provider_id": 10005,
        "record_status": 3,
        "view_time_minutes": 19,
        "reject_reason": 1
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635309",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_boundary_44",
      "test_name": "TakeOrderRecord_record_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for record_id",
      "test_data": {
        "record_id": 999999,
        "dispatch_order_id": 10005,
        "provider_id": 10006,
        "record_status": 5,
        "view_time_minutes": 38,
        "reject_reason": 3
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635310",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_boundary_44",
      "test_name": "TakeOrderRecord_dispatch_order_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for dispatch_order_id",
      "test_data": {
        "record_id": 10007,
        "dispatch_order_id": 0,
        "provider_id": 10007,
        "record_status": 2,
        "view_time_minutes": 63,
        "reject_reason": 0
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635311",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_boundary_44",
      "test_name": "TakeOrderRecord_dispatch_order_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for dispatch_order_id",
      "test_data": {
        "record_id": 10008,
        "dispatch_order_id": 999999,
        "provider_id": 10008,
        "record_status": 2,
        "view_time_minutes": 98,
        "reject_reason": 2
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635311",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_negative_44",
      "test_name": "TakeOrderRecord_record_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for record_id",
      "test_data": {
        "record_id": "not_a_number",
        "dispatch_order_id": 10008,
        "provider_id": 10009,
        "record_status": 4,
        "view_time_minutes": 4,
        "reject_reason": 3
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635312",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "TakeOrderRecord_negative_44",
      "test_name": "TakeOrderRecord_dispatch_order_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for dispatch_order_id",
      "test_data": {
        "record_id": 10010,
        "dispatch_order_id": "not_a_number",
        "provider_id": 10010,
        "record_status": 1,
        "view_time_minutes": 33,
        "reject_reason": 2
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635312",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "TakeOrderRecord_constraint_satisfaction_44",
      "test_name": "TakeOrderRecord_record_id_positive_constraint",
      "test_type": "constraint_satisfaction",
      "description": "Test implicit positive constraint for record_id",
      "test_data": {
        "record_id": 10011,
        "dispatch_order_id": 10010,
        "provider_id": 10011,
        "record_status": 2,
        "view_time_minutes": 51,
        "reject_reason": 1
      },
      "expected_result": "pass",
      "priority": 6,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635313",
      "constraint": "record_id >= 0",
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_scenario_44",
      "test_name": "TakeOrderRecord_scenario_complete_dispatch_flow",
      "test_type": "scenario",
      "description": "完整的派单流程测试：从创建预约到派单成功",
      "test_data": {
        "scenario_name": "complete_dispatch_flow",
        "initial_state": {},
        "steps": [
          {
            "action": "创建新的预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 180
            },
            "expected_result": {
              "reserve_order_created": true
            }
          },
          {
            "action": "系统自动派单",
            "entity": "DispatchOrder",
            "timing": 5,
            "state_change": {
              "dispatch_status": 2,
              "dispatch_type": 1
            },
            "expected_result": {
              "dispatch_success": true,
              "notification_sent": true
            }
          },
          {
            "action": "服务人员查看订单",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "record_status": 2,
              "view_time_minutes": 10
            },
            "expected_result": {
              "order_viewed": true
            }
          },
          {
            "action": "服务人员确认接单",
            "entity": "TakeOrderRecord",
            "timing": 15,
            "state_change": {
              "record_status": 3
            },
            "expected_result": {
              "order_accepted": true,
              "inventory_updated": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635314",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_scenario_44",
      "test_name": "TakeOrderRecord_scenario_order_complete_lifecycle",
      "test_type": "scenario",
      "description": "订单完整生命周期测试：从创建到完成",
      "test_data": {
        "scenario_name": "order_complete_lifecycle",
        "initial_state": {},
        "steps": [
          {
            "action": "创建订单",
            "entity": "TakeOrderRecord",
            "timing": 0,
            "state_change": {
              "order_status": 1
            },
            "expected_result": {}
          },
          {
            "action": "派单成功",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "order_status": 2
            },
            "expected_result": {}
          },
          {
            "action": "服务人员接单",
            "entity": "TakeOrderRecord",
            "timing": 20,
            "state_change": {
              "order_status": 3
            },
            "expected_result": {}
          },
          {
            "action": "开始服务",
            "entity": "TakeOrderRecord",
            "timing": 180,
            "state_change": {
              "order_status": 4
            },
            "expected_result": {}
          },
          {
            "action": "完成服务",
            "entity": "TakeOrderRecord",
            "timing": 240,
            "state_change": {
              "order_status": 5
            },
            "expected_result": {}
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635314",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_scenario_44",
      "test_name": "TakeOrderRecord_scenario_order_modification_flow",
      "test_type": "scenario",
      "description": "用户修改预约时间的完整流程",
      "test_data": {
        "scenario_name": "order_modification_flow",
        "initial_state": {},
        "steps": [
          {
            "action": "原始预约已派单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 2,
              "service_time_minutes": 180
            },
            "expected_result": {}
          },
          {
            "action": "用户请求修改时间",
            "entity": "ReserveOrder",
            "timing": 30,
            "state_change": {
              "is_modified": true,
              "service_time_minutes": 240
            },
            "expected_result": {
              "modification_allowed": true
            }
          },
          {
            "action": "系统评估是否需要换人",
            "entity": "DispatchOrder",
            "timing": 31,
            "state_change": {
              "is_reassignment": true
            },
            "expected_result": {
              "provider_evaluation_complete": true
            }
          },
          {
            "action": "通知相关人员",
            "entity": "Notification",
            "timing": 32,
            "state_change": {
              "message_type": 4,
              "is_sent": true
            },
            "expected_result": {
              "notifications_sent": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635315",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_scenario_44",
      "test_name": "TakeOrderRecord_scenario_dispatch_timeout_handling",
      "test_type": "scenario",
      "description": "派单超时自动处理流程",
      "test_data": {
        "scenario_name": "dispatch_timeout_handling",
        "initial_state": {},
        "steps": [
          {
            "action": "创建预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 90
            },
            "expected_result": {}
          },
          {
            "action": "等待10分钟未派单",
            "entity": "DispatchOrder",
            "timing": 11,
            "state_change": {
              "dispatch_status": 1,
              "minutes_since_created": 11
            },
            "expected_result": {
              "timeout_notification_sent": true
            }
          },
          {
            "action": "继续等待至服务前1小时",
            "entity": "DispatchOrder",
            "timing": 31,
            "state_change": {
              "service_time_minutes": 59
            },
            "expected_result": {}
          },
          {
            "action": "系统自动取消",
            "entity": "DispatchOrder",
            "timing": 32,
            "state_change": {
              "dispatch_status": 6
            },
            "expected_result": {
              "auto_cancelled": true,
              "cancel_notification_sent": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635315",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TakeOrderRecord_scenario_44",
      "test_name": "TakeOrderRecord_scenario_TakeOrderRecordFlow_complete_lifecycle",
      "test_type": "scenario",
      "description": "Complete lifecycle test for TakeOrderRecordFlow",
      "test_data": {
        "scenario_name": "TakeOrderRecordFlow_complete_lifecycle",
        "initial_state": {},
        "steps": [
          {
            "action": "Execute transition: ViewOrder",
            "entity": "TakeOrderRecord",
            "timing": 0,
            "state_change": {
              "record_status": 2,
              "view_time_minutes": 10
            },
            "expected_result": {}
          },
          {
            "action": "Execute transition: AcceptAfterView",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "record_status": 3,
              "provider_status": 1
            },
            "expected_result": {}
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "TakeOrderRecord",
      "timestamp": "2025-07-14T17:16:47.635316",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceProvider_functional_59",
      "test_name": "ServiceProvider_functional_1",
      "test_type": "functional",
      "description": "Test basic functionality of ServiceProvider",
      "test_data": {
        "provider_id": 1,
        "provider_name": 1,
        "phone_number": "101-555-1001",
        "grid_id": 1,
        "provider_status": 2,
        "station_distance_km": 26.43,
        "skill_match_score": 16,
        "available_time_slots": 1
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635480",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceProvider_functional_59",
      "test_name": "ServiceProvider_functional_2",
      "test_type": "functional",
      "description": "Test basic functionality of ServiceProvider",
      "test_data": {
        "provider_id": 3,
        "provider_name": 3,
        "phone_number": "102-555-1002",
        "grid_id": 2,
        "provider_status": 1,
        "station_distance_km": 13.86,
        "skill_match_score": 22,
        "available_time_slots": 35
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635481",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceProvider_functional_59",
      "test_name": "ServiceProvider_functional_3",
      "test_type": "functional",
      "description": "Test basic functionality of ServiceProvider",
      "test_data": {
        "provider_id": 5,
        "provider_name": 5,
        "phone_number": "103-555-1003",
        "grid_id": 4,
        "provider_status": 4,
        "station_distance_km": 79.84,
        "skill_match_score": 59,
        "available_time_slots": 78
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635482",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceProvider_boundary_59",
      "test_name": "ServiceProvider_provider_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for provider_id",
      "test_data": {
        "provider_id": 0,
        "provider_name": 6,
        "phone_number": "104-555-1004",
        "grid_id": 5,
        "provider_status": 3,
        "station_distance_km": 88.73,
        "skill_match_score": 76,
        "available_time_slots": 100
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635482",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceProvider_boundary_59",
      "test_name": "ServiceProvider_provider_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for provider_id",
      "test_data": {
        "provider_id": 999999,
        "provider_name": 7,
        "phone_number": "105-555-1005",
        "grid_id": 6,
        "provider_status": 1,
        "station_distance_km": 50.43,
        "skill_match_score": 92,
        "available_time_slots": 5
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635483",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceProvider_boundary_59",
      "test_name": "ServiceProvider_grid_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for grid_id",
      "test_data": {
        "provider_id": 8,
        "provider_name": 8,
        "phone_number": "106-555-1006",
        "grid_id": 0,
        "provider_status": 4,
        "station_distance_km": 74.09,
        "skill_match_score": 1,
        "available_time_slots": 41
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635483",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceProvider_boundary_59",
      "test_name": "ServiceProvider_grid_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for grid_id",
      "test_data": {
        "provider_id": 9,
        "provider_name": 9,
        "phone_number": "107-555-1007",
        "grid_id": 999999,
        "provider_status": 3,
        "station_distance_km": 49.37,
        "skill_match_score": 27,
        "available_time_slots": 75
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635484",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "ServiceProvider_negative_59",
      "test_name": "ServiceProvider_provider_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for provider_id",
      "test_data": {
        "provider_id": "not_a_number",
        "provider_name": 10,
        "phone_number": "108-555-1008",
        "grid_id": 9,
        "provider_status": 4,
        "station_distance_km": 10.37,
        "skill_match_score": 41,
        "available_time_slots": 87
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635485",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "ServiceProvider_negative_59",
      "test_name": "ServiceProvider_provider_name_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for provider_name",
      "test_data": {
        "provider_id": 11,
        "provider_name": 12345,
        "phone_number": "109-555-1009",
        "grid_id": 10,
        "provider_status": 4,
        "station_distance_km": 35.7,
        "skill_match_score": 67,
        "available_time_slots": 5
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635485",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "ServiceProvider_constraint_satisfaction_59",
      "test_name": "ServiceProvider_provider_id_positive_constraint",
      "test_type": "constraint_satisfaction",
      "description": "Test implicit positive constraint for provider_id",
      "test_data": {
        "provider_id": 12,
        "provider_name": 12,
        "phone_number": "110-555-1010",
        "grid_id": 11,
        "provider_status": 4,
        "station_distance_km": 7.97,
        "skill_match_score": 83,
        "available_time_slots": 36
      },
      "expected_result": "pass",
      "priority": 6,
      "entity": "ServiceProvider",
      "timestamp": "2025-07-14T17:16:47.635486",
      "constraint": "provider_id >= 0",
      "expected_error": null
    },
    {
      "test_id": "TimeSlot_functional_69",
      "test_name": "TimeSlot_functional_1",
      "test_type": "functional",
      "description": "Test basic functionality of TimeSlot",
      "test_data": {
        "slot_id": 1,
        "provider_id": 1,
        "start_time_minutes": 3,
        "end_time_minutes": 17,
        "is_available": true,
        "commute_time_before": 19,
        "commute_time_after": 8
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635591",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TimeSlot_functional_69",
      "test_name": "TimeSlot_functional_2",
      "test_type": "functional",
      "description": "Test basic functionality of TimeSlot",
      "test_data": {
        "slot_id": 2,
        "provider_id": 2,
        "start_time_minutes": 48,
        "end_time_minutes": 34,
        "is_available": false,
        "commute_time_before": 38,
        "commute_time_after": 29
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635592",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TimeSlot_functional_69",
      "test_name": "TimeSlot_functional_3",
      "test_type": "functional",
      "description": "Test basic functionality of TimeSlot",
      "test_data": {
        "slot_id": 3,
        "provider_id": 4,
        "start_time_minutes": 75,
        "end_time_minutes": 61,
        "is_available": false,
        "commute_time_before": 55,
        "commute_time_after": 68
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635593",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TimeSlot_boundary_69",
      "test_name": "TimeSlot_slot_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for slot_id",
      "test_data": {
        "slot_id": 0,
        "provider_id": 5,
        "start_time_minutes": 81,
        "end_time_minutes": 83,
        "is_available": false,
        "commute_time_before": 86,
        "commute_time_after": 84
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635594",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TimeSlot_boundary_69",
      "test_name": "TimeSlot_slot_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for slot_id",
      "test_data": {
        "slot_id": 999999,
        "provider_id": 6,
        "start_time_minutes": 8,
        "end_time_minutes": 15,
        "is_available": true,
        "commute_time_before": 7,
        "commute_time_after": 4
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635594",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TimeSlot_boundary_69",
      "test_name": "TimeSlot_provider_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for provider_id",
      "test_data": {
        "slot_id": 6,
        "provider_id": 0,
        "start_time_minutes": 37,
        "end_time_minutes": 48,
        "is_available": true,
        "commute_time_before": 21,
        "commute_time_after": 35
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635595",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TimeSlot_boundary_69",
      "test_name": "TimeSlot_provider_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for provider_id",
      "test_data": {
        "slot_id": 7,
        "provider_id": 999999,
        "start_time_minutes": 54,
        "end_time_minutes": 62,
        "is_available": true,
        "commute_time_before": 80,
        "commute_time_after": 63
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635596",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "TimeSlot_negative_69",
      "test_name": "TimeSlot_slot_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for slot_id",
      "test_data": {
        "slot_id": "not_a_number",
        "provider_id": 9,
        "start_time_minutes": 83,
        "end_time_minutes": 98,
        "is_available": true,
        "commute_time_before": 86,
        "commute_time_after": 91
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635596",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "TimeSlot_negative_69",
      "test_name": "TimeSlot_provider_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for provider_id",
      "test_data": {
        "slot_id": 9,
        "provider_id": "not_a_number",
        "start_time_minutes": 3,
        "end_time_minutes": 20,
        "is_available": true,
        "commute_time_before": 1,
        "commute_time_after": 17
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635597",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "TimeSlot_constraint_satisfaction_69",
      "test_name": "TimeSlot_slot_id_positive_constraint",
      "test_type": "constraint_satisfaction",
      "description": "Test implicit positive constraint for slot_id",
      "test_data": {
        "slot_id": 10,
        "provider_id": 11,
        "start_time_minutes": 31,
        "end_time_minutes": 31,
        "is_available": false,
        "commute_time_before": 42,
        "commute_time_after": 26
      },
      "expected_result": "pass",
      "priority": 6,
      "entity": "TimeSlot",
      "timestamp": "2025-07-14T17:16:47.635597",
      "constraint": "slot_id >= 0",
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_functional_79",
      "test_name": "DispatchEvent_functional_1",
      "test_type": "functional",
      "description": "Test basic functionality of DispatchEvent",
      "test_data": {
        "event_id": 1,
        "event_type": 4,
        "dispatch_order_id": 1,
        "trigger_time_minutes": 4,
        "old_provider_id": 1,
        "new_provider_id": 1
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635748",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_functional_79",
      "test_name": "DispatchEvent_functional_2",
      "test_type": "functional",
      "description": "Test basic functionality of DispatchEvent",
      "test_data": {
        "event_id": 2,
        "event_type": 6,
        "dispatch_order_id": 2,
        "trigger_time_minutes": 35,
        "old_provider_id": 2,
        "new_provider_id": 3
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635749",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_functional_79",
      "test_name": "DispatchEvent_functional_3",
      "test_type": "functional",
      "description": "Test basic functionality of DispatchEvent",
      "test_data": {
        "event_id": 3,
        "event_type": 2,
        "dispatch_order_id": 3,
        "trigger_time_minutes": 62,
        "old_provider_id": 3,
        "new_provider_id": 4
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635750",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_boundary_79",
      "test_name": "DispatchEvent_event_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for event_id",
      "test_data": {
        "event_id": 0,
        "event_type": 5,
        "dispatch_order_id": 4,
        "trigger_time_minutes": 89,
        "old_provider_id": 4,
        "new_provider_id": 5
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635750",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_boundary_79",
      "test_name": "DispatchEvent_event_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for event_id",
      "test_data": {
        "event_id": 999999,
        "event_type": 3,
        "dispatch_order_id": 5,
        "trigger_time_minutes": 14,
        "old_provider_id": 5,
        "new_provider_id": 6
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635751",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_boundary_79",
      "test_name": "DispatchEvent_event_type_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for event_type",
      "test_data": {
        "event_id": 6,
        "event_type": 0,
        "dispatch_order_id": 6,
        "trigger_time_minutes": 49,
        "old_provider_id": 6,
        "new_provider_id": 7
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635751",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_boundary_79",
      "test_name": "DispatchEvent_event_type_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for event_type",
      "test_data": {
        "event_id": 7,
        "event_type": 999999,
        "dispatch_order_id": 7,
        "trigger_time_minutes": 64,
        "old_provider_id": 7,
        "new_provider_id": 8
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635752",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_negative_79",
      "test_name": "DispatchEvent_event_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for event_id",
      "test_data": {
        "event_id": "not_a_number",
        "event_type": 1,
        "dispatch_order_id": 8,
        "trigger_time_minutes": 86,
        "old_provider_id": 8,
        "new_provider_id": 9
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635753",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "DispatchEvent_negative_79",
      "test_name": "DispatchEvent_event_type_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for event_type",
      "test_data": {
        "event_id": 9,
        "event_type": "not_a_number",
        "dispatch_order_id": 9,
        "trigger_time_minutes": 17,
        "old_provider_id": 9,
        "new_provider_id": 10
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635753",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "DispatchEvent_constraint_satisfaction_79",
      "test_name": "DispatchEvent_event_id_positive_constraint",
      "test_type": "constraint_satisfaction",
      "description": "Test implicit positive constraint for event_id",
      "test_data": {
        "event_id": 10,
        "event_type": 3,
        "dispatch_order_id": 10,
        "trigger_time_minutes": 48,
        "old_provider_id": 10,
        "new_provider_id": 11
      },
      "expected_result": "pass",
      "priority": 6,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635754",
      "constraint": "event_id >= 0",
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_scenario_79",
      "test_name": "DispatchEvent_scenario_complete_dispatch_flow",
      "test_type": "scenario",
      "description": "完整的派单流程测试：从创建预约到派单成功",
      "test_data": {
        "scenario_name": "complete_dispatch_flow",
        "initial_state": {},
        "steps": [
          {
            "action": "创建新的预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 180
            },
            "expected_result": {
              "reserve_order_created": true
            }
          },
          {
            "action": "系统自动派单",
            "entity": "DispatchOrder",
            "timing": 5,
            "state_change": {
              "dispatch_status": 2,
              "dispatch_type": 1
            },
            "expected_result": {
              "dispatch_success": true,
              "notification_sent": true
            }
          },
          {
            "action": "服务人员查看订单",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "record_status": 2,
              "view_time_minutes": 10
            },
            "expected_result": {
              "order_viewed": true
            }
          },
          {
            "action": "服务人员确认接单",
            "entity": "TakeOrderRecord",
            "timing": 15,
            "state_change": {
              "record_status": 3
            },
            "expected_result": {
              "order_accepted": true,
              "inventory_updated": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635755",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_scenario_79",
      "test_name": "DispatchEvent_scenario_rejection_and_reassignment",
      "test_type": "scenario",
      "description": "服务人员拒单及重新派单流程",
      "test_data": {
        "scenario_name": "rejection_and_reassignment",
        "initial_state": {},
        "steps": [
          {
            "action": "初始派单",
            "entity": "DispatchOrder",
            "timing": 0,
            "state_change": {
              "dispatch_status": 2,
              "service_time_minutes": 120
            },
            "expected_result": {}
          },
          {
            "action": "服务人员拒单",
            "entity": "TakeOrderRecord",
            "timing": 10,
            "state_change": {
              "record_status": 4,
              "reject_reason": 1
            },
            "expected_result": {
              "dispatch_status": 4
            }
          },
          {
            "action": "系统重新派单",
            "entity": "DispatchOrder",
            "timing": 15,
            "state_change": {
              "dispatch_status": 2,
              "is_reassignment": true
            },
            "expected_result": {
              "new_provider_assigned": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635755",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "DispatchEvent_scenario_79",
      "test_name": "DispatchEvent_scenario_dispatch_timeout_handling",
      "test_type": "scenario",
      "description": "派单超时自动处理流程",
      "test_data": {
        "scenario_name": "dispatch_timeout_handling",
        "initial_state": {},
        "steps": [
          {
            "action": "创建预约单",
            "entity": "ReserveOrder",
            "timing": 0,
            "state_change": {
              "reserve_status": 1,
              "service_time_minutes": 90
            },
            "expected_result": {}
          },
          {
            "action": "等待10分钟未派单",
            "entity": "DispatchOrder",
            "timing": 11,
            "state_change": {
              "dispatch_status": 1,
              "minutes_since_created": 11
            },
            "expected_result": {
              "timeout_notification_sent": true
            }
          },
          {
            "action": "继续等待至服务前1小时",
            "entity": "DispatchOrder",
            "timing": 31,
            "state_change": {
              "service_time_minutes": 59
            },
            "expected_result": {}
          },
          {
            "action": "系统自动取消",
            "entity": "DispatchOrder",
            "timing": 32,
            "state_change": {
              "dispatch_status": 6
            },
            "expected_result": {
              "auto_cancelled": true,
              "cancel_notification_sent": true
            }
          }
        ],
        "expected_final_state": {}
      },
      "expected_result": "pass",
      "priority": 9,
      "entity": "DispatchEvent",
      "timestamp": "2025-07-14T17:16:47.635756",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "Notification_functional_92",
      "test_name": "Notification_functional_1",
      "test_type": "functional",
      "description": "Test basic functionality of Notification",
      "test_data": {
        "notification_id": 1,
        "message_type": 3,
        "recipient_type": 3,
        "recipient_id": 1,
        "is_sent": true,
        "send_time_minutes": 15
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635908",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "Notification_functional_92",
      "test_name": "Notification_functional_2",
      "test_type": "functional",
      "description": "Test basic functionality of Notification",
      "test_data": {
        "notification_id": 3,
        "message_type": 4,
        "recipient_type": 2,
        "recipient_id": 3,
        "is_sent": true,
        "send_time_minutes": 31
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635909",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "Notification_functional_92",
      "test_name": "Notification_functional_3",
      "test_type": "functional",
      "description": "Test basic functionality of Notification",
      "test_data": {
        "notification_id": 5,
        "message_type": 2,
        "recipient_type": 2,
        "recipient_id": 5,
        "is_sent": false,
        "send_time_minutes": 67
      },
      "expected_result": "pass",
      "priority": 8,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635910",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "Notification_boundary_92",
      "test_name": "Notification_notification_id_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for notification_id",
      "test_data": {
        "notification_id": 0,
        "message_type": 5,
        "recipient_type": 2,
        "recipient_id": 6,
        "is_sent": false,
        "send_time_minutes": 97
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635910",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "Notification_boundary_92",
      "test_name": "Notification_notification_id_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for notification_id",
      "test_data": {
        "notification_id": 999999,
        "message_type": 4,
        "recipient_type": 3,
        "recipient_id": 7,
        "is_sent": true,
        "send_time_minutes": 14
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635911",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "Notification_boundary_92",
      "test_name": "Notification_message_type_min_boundary",
      "test_type": "boundary",
      "description": "Test minimum boundary for message_type",
      "test_data": {
        "notification_id": 8,
        "message_type": 0,
        "recipient_type": 2,
        "recipient_id": 8,
        "is_sent": true,
        "send_time_minutes": 37
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635911",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "Notification_boundary_92",
      "test_name": "Notification_message_type_max_boundary",
      "test_type": "boundary",
      "description": "Test maximum boundary for message_type",
      "test_data": {
        "notification_id": 9,
        "message_type": 999999,
        "recipient_type": 3,
        "recipient_id": 9,
        "is_sent": false,
        "send_time_minutes": 55
      },
      "expected_result": "pass",
      "priority": 7,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635912",
      "constraint": null,
      "expected_error": null
    },
    {
      "test_id": "Notification_negative_92",
      "test_name": "Notification_notification_id_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for notification_id",
      "test_data": {
        "notification_id": "not_a_number",
        "message_type": 4,
        "recipient_type": 2,
        "recipient_id": 10,
        "is_sent": false,
        "send_time_minutes": 97
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635913",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "Notification_negative_92",
      "test_name": "Notification_message_type_invalid_type",
      "test_type": "negative",
      "description": "Test invalid type for message_type",
      "test_data": {
        "notification_id": 11,
        "message_type": "not_a_number",
        "recipient_type": 3,
        "recipient_id": 11,
        "is_sent": true,
        "send_time_minutes": 13
      },
      "expected_result": "fail",
      "priority": 6,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635913",
      "constraint": null,
      "expected_error": "type_error"
    },
    {
      "test_id": "Notification_constraint_satisfaction_92",
      "test_name": "Notification_notification_id_positive_constraint",
      "test_type": "constraint_satisfaction",
      "description": "Test implicit positive constraint for notification_id",
      "test_data": {
        "notification_id": 12,
        "message_type": 2,
        "recipient_type": 2,
        "recipient_id": 12,
        "is_sent": false,
        "send_time_minutes": 46
      },
      "expected_result": "pass",
      "priority": 6,
      "entity": "Notification",
      "timestamp": "2025-07-14T17:16:47.635914",
      "constraint": "notification_id >= 0",
      "expected_error": null
    }
  ]
}