{
  "meta": {
    "generator": "Unified DSL Test Generator v5.0",
    "domain": "学生成绩管理系统",
    "timestamp": "2025-07-11T00:29:31.530729",
    "dsl_file": "examples/advanced/student_system_mixed.yaml",
    "test_requirements_parsed": true
  },
  "summary": {
    "total_tests": 33,
    "test_distribution": {
      "functional": 4,
      "constraint_satisfaction": 3,
      "boundary": 9,
      "collection": 2,
      "combinatorial": 1,
      "rule_activation": 3,
      "negative": 11
    },
    "tag_distribution": {
      "functional": 4,
      "student": 2,
      "business_data": 2,
      "complete": 2,
      "course": 2,
      "constraint": 3,
      "satisfaction": 3,
      "boundary": 9,
      "student_score": 4,
      "min": 3,
      "below_min": 3,
      "negative": 14,
      "max": 3,
      "student_grade_level": 4,
      "collection": 2,
      "student_subjects": 2,
      "single": 2,
      "required_test": 2,
      "student_honors": 2,
      "combinatorial": 1,
      "2way": 1,
      "grade_level": 1,
      "subjects": 1,
      "rule": 3,
      "activation": 3,
      "优秀学生标准": 1,
      "高年级选课要求": 1,
      "低年级选课限制": 1,
      "course_credit_hours": 4,
      "type_validation": 11,
      "student_student_id": 1,
      "student_name": 1,
      "student_is_excellent": 1,
      "course_course_code": 1,
      "course_course_name": 1,
      "course_is_required": 1
    },
    "priority_distribution": {
      "high": 12,
      "medium": 21
    },
    "requirements_coverage": {
      "test_requirements": [
        {
          "name": "成绩边界测试",
          "type": "boundary",
          "covered": true
        },
        {
          "name": "选课数量测试",
          "type": "collection",
          "covered": true
        },
        {
          "name": "年级与选课组合",
          "type": "combinatorial",
          "covered": true
        },
        {
          "name": "规则覆盖测试",
          "type": "equivalence",
          "covered": false
        }
      ],
      "constraints": [
        {
          "constraint": "student_grade_level >= 1 and student_grade_level <= 6",
          "covered": true
        },
        {
          "constraint": "student_score >= 0 and student_score <= 100",
          "covered": true
        },
        {
          "constraint": "size(student_subjects) >= 1",
          "covered": false
        },
        {
          "constraint": "course_credit_hours >= 1",
          "covered": true
        }
      ],
      "rules": [
        {
          "rule": "优秀学生标准",
          "covered": true
        },
        {
          "rule": "高年级选课要求",
          "covered": true
        },
        {
          "rule": "低年级选课限制",
          "covered": true
        },
        {
          "rule": "必修课学分要求",
          "covered": false
        }
      ]
    }
  },
  "test_suites": {
    "functional": [
      {
        "id": "TEST_0001",
        "name": "Create Student with valid business data",
        "type": "functional",
        "description": "Test creating Student with realistic data",
        "test_data": {
          "student_student_id": 568,
          "student_name": "test_value",
          "student_grade_level": 1,
          "student_score": 0,
          "student_subjects": [
            "subjects_0"
          ],
          "student_honors": [
            "honors_0"
          ],
          "student_is_excellent": true
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "student",
          "business_data"
        ]
      },
      {
        "id": "TEST_0002",
        "name": "Create Student with all fields",
        "type": "functional",
        "description": "Test Student with all optional fields",
        "test_data": {
          "student_student_id": 511,
          "student_name": "test_value",
          "student_grade_level": 1,
          "student_score": 0,
          "student_subjects": [
            "subjects_0",
            "subjects_1",
            "subjects_2",
            "subjects_3",
            "subjects_4",
            "subjects_5"
          ],
          "student_honors": [
            "honors_0",
            "honors_1",
            "honors_2",
            "honors_3",
            "honors_4"
          ],
          "student_is_excellent": true
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "student",
          "complete"
        ]
      },
      {
        "id": "TEST_0003",
        "name": "Create Course with valid business data",
        "type": "functional",
        "description": "Test creating Course with realistic data",
        "test_data": {
          "course_course_code": "test_value",
          "course_course_name": "test_value",
          "course_credit_hours": 1,
          "course_is_required": false
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "course",
          "business_data"
        ]
      },
      {
        "id": "TEST_0004",
        "name": "Create Course with all fields",
        "type": "functional",
        "description": "Test Course with all optional fields",
        "test_data": {
          "course_course_code": "test_value",
          "course_course_name": "test_value",
          "course_credit_hours": 1,
          "course_is_required": true
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "course",
          "complete"
        ]
      }
    ],
    "constraint_satisfaction": [
      {
        "id": "TEST_0005",
        "name": "Constraint satisfaction: student_grade_level >= 1 and student_grade_level <",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "student_grade_level": 27.64298433129786,
          "student_student_id": 436,
          "student_name": "test_value",
          "student_score": 0,
          "student_subjects": [
            "subjects_0",
            "subjects_1",
            "subjects_2",
            "subjects_3",
            "subjects_4",
            "subjects_5",
            "subjects_6",
            "subjects_7",
            "subjects_8",
            "subjects_9"
          ],
          "student_honors": [
            "honors_0"
          ],
          "student_is_excellent": false
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "student_grade_level >= 1 and student_grade_level <= 6"
        ]
      },
      {
        "id": "TEST_0006",
        "name": "Constraint satisfaction: student_score >= 0 and student_score <= 100",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "student_score": 58.96837261643837,
          "student_student_id": 846,
          "student_name": "test_value",
          "student_grade_level": 1,
          "student_subjects": [
            "subjects_0",
            "subjects_1",
            "subjects_2",
            "subjects_3",
            "subjects_4"
          ],
          "student_honors": [
            "honors_0",
            "honors_1",
            "honors_2"
          ],
          "student_is_excellent": true
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "student_score >= 0 and student_score <= 100"
        ]
      },
      {
        "id": "TEST_0007",
        "name": "Constraint satisfaction: course_credit_hours >= 1",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "course_credit_hours": 92.85449971265214,
          "course_course_code": "test_value",
          "course_course_name": "test_value",
          "course_is_required": false
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "course_credit_hours >= 1"
        ]
      }
    ],
    "boundary": [
      {
        "id": "TEST_0008",
        "name": "Boundary test: student_score = 0",
        "type": "boundary",
        "description": "Test minimum value for student_score",
        "test_data": {
          "student_score": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "student_score",
          "min"
        ]
      },
      {
        "id": "TEST_0009",
        "name": "Boundary test: student_score < min",
        "type": "boundary",
        "description": "Test below minimum value for student_score",
        "test_data": {
          "student_score": -1
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "student_score",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0010",
        "name": "Boundary test: student_score = 100",
        "type": "boundary",
        "description": "Test maximum value for student_score",
        "test_data": {
          "student_score": 100
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "student_score",
          "max"
        ]
      },
      {
        "id": "TEST_0011",
        "name": "Boundary test: student_grade_level = 1",
        "type": "boundary",
        "description": "Test minimum value for student_grade_level",
        "test_data": {
          "student_grade_level": 1
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "student_grade_level",
          "min"
        ]
      },
      {
        "id": "TEST_0012",
        "name": "Boundary test: student_grade_level < min",
        "type": "boundary",
        "description": "Test below minimum value for student_grade_level",
        "test_data": {
          "student_grade_level": 0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "student_grade_level",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0013",
        "name": "Boundary test: student_grade_level = 6",
        "type": "boundary",
        "description": "Test maximum value for student_grade_level",
        "test_data": {
          "student_grade_level": 6
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "student_grade_level",
          "max"
        ]
      },
      {
        "id": "TEST_0029",
        "name": "Boundary test: course_credit_hours = 1",
        "type": "boundary",
        "description": "Test minimum value for course_credit_hours",
        "test_data": {
          "course_credit_hours": 1
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "course_credit_hours",
          "min"
        ]
      },
      {
        "id": "TEST_0030",
        "name": "Boundary test: course_credit_hours < min",
        "type": "boundary",
        "description": "Test below minimum value for course_credit_hours",
        "test_data": {
          "course_credit_hours": 0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "course_credit_hours",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0031",
        "name": "Boundary test: course_credit_hours = 6",
        "type": "boundary",
        "description": "Test maximum value for course_credit_hours",
        "test_data": {
          "course_credit_hours": 6
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "course_credit_hours",
          "max"
        ]
      }
    ],
    "collection": [
      {
        "id": "TEST_0014",
        "name": "Required test - Single student_subjects",
        "type": "collection",
        "description": "Test student_subjects with single element as required",
        "test_data": {
          "student_subjects": [
            "subjects_0"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "student_subjects",
          "single",
          "required_test"
        ]
      },
      {
        "id": "TEST_0015",
        "name": "Required test - Single student_honors",
        "type": "collection",
        "description": "Test student_honors with single element as required",
        "test_data": {
          "student_honors": [
            "honors_0"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "student_honors",
          "single",
          "required_test"
        ]
      }
    ],
    "combinatorial": [
      {
        "id": "TEST_0016",
        "name": "2-way combination #1: grade_level × subjects",
        "type": "combinatorial",
        "description": "Test combination of grade_level and subjects",
        "test_data": {},
        "expected_result": "pass",
        "priority": 5,
        "tags": [
          "combinatorial",
          "2way",
          "grade_level",
          "subjects"
        ]
      }
    ],
    "rule_activation": [
      {
        "id": "TEST_0020",
        "name": "Rule activation: 优秀学生标准",
        "type": "rule_activation",
        "description": "Test 优秀学生标准 when condition is true",
        "test_data": {
          "student_score": 179.79181014499918,
          "student_student_id": 831,
          "student_name": "test_value",
          "student_grade_level": 1,
          "student_subjects": [
            "subjects_0"
          ],
          "student_honors": [
            "honors_0"
          ],
          "student_is_excellent": false
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "优秀学生标准"
        ],
        "rules_tested": [
          "优秀学生标准"
        ]
      },
      {
        "id": "TEST_0021",
        "name": "Rule activation: 高年级选课要求",
        "type": "rule_activation",
        "description": "Test 高年级选课要求 when condition is true",
        "test_data": {
          "student_grade_level": 45.85336380015771,
          "student_student_id": 177,
          "student_name": "test_value",
          "student_score": 0,
          "student_subjects": [
            "subjects_0"
          ],
          "student_honors": [
            "honors_0"
          ],
          "student_is_excellent": false
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "高年级选课要求"
        ],
        "rules_tested": [
          "高年级选课要求"
        ]
      },
      {
        "id": "TEST_0022",
        "name": "Rule activation: 低年级选课限制",
        "type": "rule_activation",
        "description": "Test 低年级选课限制 when condition is true",
        "test_data": {
          "student_grade_level": 0.3935981729140563,
          "student_student_id": 211,
          "student_name": "test_value",
          "student_score": 0,
          "student_subjects": [
            "subjects_0"
          ],
          "student_honors": [
            "honors_0"
          ],
          "student_is_excellent": false
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "低年级选课限制"
        ],
        "rules_tested": [
          "低年级选课限制"
        ]
      }
    ],
    "negative": [
      {
        "id": "TEST_0032",
        "name": "Type validation for student_student_id",
        "type": "negative",
        "description": "Testing wrong type for student_student_id",
        "test_data": {
          "student_student_id": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_student_id"
        ]
      },
      {
        "id": "TEST_0033",
        "name": "Type validation for student_name",
        "type": "negative",
        "description": "Testing wrong type for student_name",
        "test_data": {
          "student_name": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_name"
        ]
      },
      {
        "id": "TEST_0034",
        "name": "Type validation for student_grade_level",
        "type": "negative",
        "description": "Testing wrong type for student_grade_level",
        "test_data": {
          "student_grade_level": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_grade_level"
        ]
      },
      {
        "id": "TEST_0035",
        "name": "Type validation for student_score",
        "type": "negative",
        "description": "Testing wrong type for student_score",
        "test_data": {
          "student_score": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_score"
        ]
      },
      {
        "id": "TEST_0036",
        "name": "Type validation for student_subjects (not array)",
        "type": "negative",
        "description": "Testing non-array value for collection student_subjects",
        "test_data": {
          "student_subjects": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_subjects"
        ]
      },
      {
        "id": "TEST_0037",
        "name": "Type validation for student_honors (not array)",
        "type": "negative",
        "description": "Testing non-array value for collection student_honors",
        "test_data": {
          "student_honors": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_honors"
        ]
      },
      {
        "id": "TEST_0038",
        "name": "Type validation for student_is_excellent",
        "type": "negative",
        "description": "Testing wrong type for student_is_excellent",
        "test_data": {
          "student_is_excellent": "not_a_bool"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_is_excellent"
        ]
      },
      {
        "id": "TEST_0039",
        "name": "Type validation for course_course_code",
        "type": "negative",
        "description": "Testing wrong type for course_course_code",
        "test_data": {
          "course_course_code": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "course_course_code"
        ]
      },
      {
        "id": "TEST_0040",
        "name": "Type validation for course_course_name",
        "type": "negative",
        "description": "Testing wrong type for course_course_name",
        "test_data": {
          "course_course_name": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "course_course_name"
        ]
      },
      {
        "id": "TEST_0041",
        "name": "Type validation for course_credit_hours",
        "type": "negative",
        "description": "Testing wrong type for course_credit_hours",
        "test_data": {
          "course_credit_hours": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "course_credit_hours"
        ]
      },
      {
        "id": "TEST_0042",
        "name": "Type validation for course_is_required",
        "type": "negative",
        "description": "Testing wrong type for course_is_required",
        "test_data": {
          "course_is_required": "not_a_bool"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "course_is_required"
        ]
      }
    ]
  }
}