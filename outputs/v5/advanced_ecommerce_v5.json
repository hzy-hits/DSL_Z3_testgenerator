{
  "meta": {
    "generator": "Unified DSL Test Generator v5.0",
    "domain": "Advanced E-commerce Platform",
    "timestamp": "2025-07-11T00:29:31.596804",
    "dsl_file": "examples/advanced/advanced_ecommerce.yaml",
    "test_requirements_parsed": false
  },
  "summary": {
    "total_tests": 59,
    "test_distribution": {
      "functional": 4,
      "constraint_satisfaction": 4,
      "collection": 7,
      "rule_activation": 1,
      "rule_deactivation": 1,
      "boundary": 10,
      "negative": 25,
      "state_transition": 7
    },
    "tag_distribution": {
      "functional": 4,
      "product": 2,
      "business_data": 2,
      "complete": 2,
      "order": 2,
      "constraint": 4,
      "satisfaction": 4,
      "collection": 7,
      "product_categories": 4,
      "empty": 2,
      "single": 2,
      "max_size": 2,
      "boundary": 12,
      "order_items": 5,
      "normal": 1,
      "rule": 2,
      "activation": 1,
      "free_shipping_for_large_orders": 2,
      "deactivation": 1,
      "product_price": 4,
      "min": 4,
      "below_min": 3,
      "negative": 28,
      "max": 3,
      "product_cost": 4,
      "product_stock_quantity": 4,
      "product_created_at": 2,
      "type_validation": 25,
      "product_sku": 1,
      "product_release_date": 1,
      "product_is_active": 1,
      "product_supplier_email": 1,
      "product_warehouse_location": 1,
      "order_order_id": 1,
      "order_customer_email": 1,
      "order_subtotal": 1,
      "order_tax_amount": 1,
      "order_shipping_cost": 1,
      "order_total_amount": 1,
      "order_discount_percentage": 1,
      "order_order_date": 1,
      "order_shipping_date": 1,
      "order_delivery_date": 1,
      "order_status": 1,
      "order_payment_method": 1,
      "order_shipping_address": 1,
      "order_billing_address": 1,
      "state_machine": 7,
      "transition": 7,
      "orderlifecycle": 7
    },
    "priority_distribution": {
      "high": 9,
      "medium": 50
    },
    "requirements_coverage": {
      "test_requirements": [],
      "constraints": [
        {
          "constraint": "Product.price > Product.cost",
          "covered": true
        },
        {
          "constraint": "Product.stock_quantity >= 0",
          "covered": false
        },
        {
          "constraint": "Order.total_amount == Order.subtotal + Order.tax_amount + Order.shipping_cost - (Order.subtotal * Order.discount_percentage / 100)",
          "covered": false
        },
        {
          "constraint": "Order.tax_amount >= 0",
          "covered": false
        },
        {
          "constraint": "Order.shipping_cost >= 0",
          "covered": false
        },
        {
          "constraint": "size(Order.items) > 0",
          "covered": false
        },
        {
          "constraint": "Product.release_date >= Product.created_at",
          "covered": false
        },
        {
          "constraint": "Order.shipping_date >= Order.order_date",
          "covered": false
        },
        {
          "constraint": "Order.delivery_date >= Order.shipping_date",
          "covered": false
        },
        {
          "constraint": "(Order.status == 'shipped' || Order.status == 'delivered') => Order.shipping_date != null",
          "covered": true
        },
        {
          "constraint": "Order.status == 'delivered' => Order.delivery_date != null",
          "covered": true
        },
        {
          "constraint": "Order.discount_percentage > 50 => Order.total_amount > 100",
          "covered": true
        }
      ],
      "rules": [
        {
          "rule": "Free Shipping for Large Orders",
          "covered": true
        },
        {
          "rule": "VIP Discount",
          "covered": false
        },
        {
          "rule": "Tax Calculation",
          "covered": false
        },
        {
          "rule": "Stock Alert",
          "covered": false
        },
        {
          "rule": "Auto Deactivate Out of Stock",
          "covered": false
        }
      ]
    }
  },
  "test_suites": {
    "functional": [
      {
        "id": "TEST_0001",
        "name": "Create Product with valid business data",
        "type": "functional",
        "description": "Test creating Product with realistic data",
        "test_data": {
          "product_sku": "test_value",
          "product_price": 600.75,
          "product_cost": 262.99,
          "product_stock_quantity": 0,
          "product_created_at": 1751337328,
          "product_release_date": 1752164971,
          "product_categories": [
            "category3"
          ],
          "product_is_active": true,
          "product_supplier_email": "test1@example.com",
          "product_warehouse_location": "ASIA-PACIFIC"
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "product",
          "business_data"
        ]
      },
      {
        "id": "TEST_0002",
        "name": "Create Product with all fields",
        "type": "functional",
        "description": "Test Product with all optional fields",
        "test_data": {
          "product_sku": "test_value",
          "product_price": 632.68,
          "product_cost": 482.59,
          "product_stock_quantity": 0,
          "product_created_at": 1751739973,
          "product_release_date": 1752164971,
          "product_categories": [
            "category1"
          ],
          "product_is_active": true,
          "product_supplier_email": "test1@example.com",
          "product_warehouse_location": "US-EAST"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "product",
          "complete"
        ]
      },
      {
        "id": "TEST_0003",
        "name": "Create Order with valid business data",
        "type": "functional",
        "description": "Test creating Order with realistic data",
        "test_data": {
          "order_order_id": 10001,
          "order_customer_email": "test1@example.com",
          "order_items": [
            "items_0",
            "items_1",
            "items_2"
          ],
          "order_subtotal": 0.01,
          "order_tax_amount": 303.16,
          "order_shipping_cost": 238.99,
          "order_total_amount": 927.1,
          "order_discount_percentage": 0,
          "order_order_date": 1752164971,
          "order_shipping_date": 1752353076,
          "order_delivery_date": 1752164971,
          "order_status": "delivered",
          "order_payment_method": "debit_card",
          "order_shipping_address": "test_value",
          "order_billing_address": "test_value"
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "order",
          "business_data"
        ]
      },
      {
        "id": "TEST_0004",
        "name": "Create Order with all fields",
        "type": "functional",
        "description": "Test Order with all optional fields",
        "test_data": {
          "order_order_id": 10002,
          "order_customer_email": "test1@example.com",
          "order_items": [
            "items_0",
            "items_1",
            "items_2",
            "items_3",
            "items_4"
          ],
          "order_subtotal": 0.01,
          "order_tax_amount": 742.99,
          "order_shipping_cost": 335.29,
          "order_total_amount": 901.15,
          "order_discount_percentage": 0,
          "order_order_date": 1752164971,
          "order_shipping_date": 1752286462,
          "order_delivery_date": 1752164971,
          "order_status": "pending",
          "order_payment_method": "google_pay",
          "order_shipping_address": "test_value",
          "order_billing_address": "test_value"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "order",
          "complete"
        ]
      }
    ],
    "constraint_satisfaction": [
      {
        "id": "TEST_0005",
        "name": "Constraint satisfaction: Product.price > Product.cost",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "product_cost": 80.87,
          "product_price": 156.07,
          "product_sku": "test_value",
          "product_stock_quantity": 0,
          "product_created_at": 1751624848,
          "product_categories": [
            "category3"
          ],
          "product_is_active": true,
          "product_supplier_email": "test1@example.com",
          "product_warehouse_location": "ASIA-PACIFIC"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Product.price > Product.cost"
        ]
      },
      {
        "id": "TEST_0006",
        "name": "Constraint satisfaction: (Order.status == 'shipped' || Order.status == 'del",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_status": "delivered",
          "order_delivery_date": 1752164971,
          "order_order_id": 10003,
          "order_customer_email": "test1@example.com",
          "order_items": [
            "items_0",
            "items_1"
          ],
          "order_subtotal": 0.01,
          "order_tax_amount": 369.77,
          "order_shipping_cost": 363.71,
          "order_total_amount": 999.13,
          "order_discount_percentage": 0,
          "order_order_date": 1752164971,
          "order_payment_method": "debit_card",
          "order_shipping_address": "test_value"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "(Order.status == 'shipped' || Order.status == 'delivered') => Order.shipping_date != null"
        ]
      },
      {
        "id": "TEST_0007",
        "name": "Constraint satisfaction: Order.status == 'delivered' => Order.delivery_date",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_status": "delivered",
          "order_delivery_date": 1752164971,
          "order_order_id": 10004,
          "order_customer_email": "test1@example.com",
          "order_items": [
            "items_0",
            "items_1",
            "items_2",
            "items_3",
            "items_4",
            "items_5",
            "items_6",
            "items_7",
            "items_8",
            "items_9"
          ],
          "order_subtotal": 0.01,
          "order_tax_amount": 938.07,
          "order_shipping_cost": 392.99,
          "order_total_amount": 354.89,
          "order_discount_percentage": 0,
          "order_order_date": 1752164971,
          "order_payment_method": "debit_card",
          "order_shipping_address": "test_value"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.status == 'delivered' => Order.delivery_date != null"
        ]
      },
      {
        "id": "TEST_0008",
        "name": "Constraint satisfaction: Order.discount_percentage > 50 => Order.total_amou",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {},
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.discount_percentage > 50 => Order.total_amount > 100"
        ]
      }
    ],
    "collection": [
      {
        "id": "TEST_0009",
        "name": "Empty collection: product_categories",
        "type": "collection",
        "description": "Test product_categories with empty collection",
        "test_data": {
          "product_categories": []
        },
        "expected_result": "pass",
        "priority": 6,
        "tags": [
          "collection",
          "product_categories",
          "empty"
        ]
      },
      {
        "id": "TEST_0010",
        "name": "Single element: product_categories",
        "type": "collection",
        "description": "Test product_categories with one element",
        "test_data": {
          "product_categories": [
            "category3"
          ]
        },
        "expected_result": "pass",
        "priority": 6,
        "tags": [
          "collection",
          "product_categories",
          "single"
        ]
      },
      {
        "id": "TEST_0012",
        "name": "Max size: product_categories",
        "type": "collection",
        "description": "Test product_categories at maximum capacity (1)",
        "test_data": {
          "product_categories": [
            "category2"
          ]
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "collection",
          "product_categories",
          "max_size",
          "boundary"
        ]
      },
      {
        "id": "TEST_0013",
        "name": "Empty collection: order_items",
        "type": "collection",
        "description": "Test order_items with empty collection",
        "test_data": {
          "order_items": []
        },
        "expected_result": "pass",
        "priority": 6,
        "tags": [
          "collection",
          "order_items",
          "empty"
        ]
      },
      {
        "id": "TEST_0014",
        "name": "Single element: order_items",
        "type": "collection",
        "description": "Test order_items with one element",
        "test_data": {
          "order_items": [
            "items_0",
            "items_1",
            "items_2",
            "items_3",
            "items_4",
            "items_5"
          ]
        },
        "expected_result": "pass",
        "priority": 6,
        "tags": [
          "collection",
          "order_items",
          "single"
        ]
      },
      {
        "id": "TEST_0015",
        "name": "Normal size: order_items",
        "type": "collection",
        "description": "Test order_items with 1 elements",
        "test_data": {
          "order_items": [
            "items_0",
            "items_1",
            "items_2",
            "items_3",
            "items_4",
            "items_5",
            "items_6",
            "items_7"
          ]
        },
        "expected_result": "pass",
        "priority": 6,
        "tags": [
          "collection",
          "order_items",
          "normal"
        ]
      },
      {
        "id": "TEST_0016",
        "name": "Max size: order_items",
        "type": "collection",
        "description": "Test order_items at maximum capacity (1)",
        "test_data": {
          "order_items": [
            "items_0",
            "items_1",
            "items_2",
            "items_3",
            "items_4",
            "items_5",
            "items_6",
            "items_7",
            "items_8",
            "items_9"
          ]
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "collection",
          "order_items",
          "max_size",
          "boundary"
        ]
      }
    ],
    "rule_activation": [
      {
        "id": "TEST_0017",
        "name": "Rule activation: Free Shipping for Large Orders",
        "type": "rule_activation",
        "description": "Test Free Shipping for Large Orders when condition is true",
        "test_data": {
          "order_subtotal": 150.0,
          "order_shipping_cost": 0.0,
          "order_order_id": 10005,
          "order_customer_email": "test1@example.com",
          "order_items": [
            "items_0",
            "items_1"
          ],
          "order_tax_amount": 71.46,
          "order_total_amount": 278.31,
          "order_discount_percentage": 0,
          "order_order_date": 1752164971,
          "order_status": "paid",
          "order_payment_method": "google_pay",
          "order_shipping_address": "test_value"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "free_shipping_for_large_orders"
        ],
        "rules_tested": [
          "Free Shipping for Large Orders"
        ]
      }
    ],
    "rule_deactivation": [
      {
        "id": "TEST_0018",
        "name": "Rule deactivation: Free Shipping for Large Orders",
        "type": "rule_deactivation",
        "description": "Test Free Shipping for Large Orders when condition is false",
        "test_data": {
          "order_subtotal": 99.99,
          "order_shipping_cost": 10.0,
          "order_order_id": 10006,
          "order_customer_email": "test1@example.com",
          "order_items": [
            "items_0",
            "items_1"
          ],
          "order_tax_amount": 870.43,
          "order_total_amount": 80.58,
          "order_discount_percentage": 0,
          "order_order_date": 1752164971,
          "order_status": "processing",
          "order_payment_method": "credit_card",
          "order_shipping_address": "test_value"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "rule",
          "deactivation",
          "free_shipping_for_large_orders"
        ],
        "rules_tested": [
          "Free Shipping for Large Orders"
        ]
      }
    ],
    "boundary": [
      {
        "id": "TEST_0019",
        "name": "Boundary test: product_price = 0.01",
        "type": "boundary",
        "description": "Test minimum value for product_price",
        "test_data": {
          "product_price": 0.01
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "product_price",
          "min"
        ]
      },
      {
        "id": "TEST_0020",
        "name": "Boundary test: product_price < min",
        "type": "boundary",
        "description": "Test below minimum value for product_price",
        "test_data": {
          "product_price": -0.99
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "product_price",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0021",
        "name": "Boundary test: product_price = 999999.99",
        "type": "boundary",
        "description": "Test maximum value for product_price",
        "test_data": {
          "product_price": 999999.99
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "product_price",
          "max"
        ]
      },
      {
        "id": "TEST_0022",
        "name": "Boundary test: product_cost = 0.01",
        "type": "boundary",
        "description": "Test minimum value for product_cost",
        "test_data": {
          "product_cost": 0.01
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "product_cost",
          "min"
        ]
      },
      {
        "id": "TEST_0023",
        "name": "Boundary test: product_cost < min",
        "type": "boundary",
        "description": "Test below minimum value for product_cost",
        "test_data": {
          "product_cost": -0.99
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "product_cost",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0024",
        "name": "Boundary test: product_cost = 999999.99",
        "type": "boundary",
        "description": "Test maximum value for product_cost",
        "test_data": {
          "product_cost": 999999.99
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "product_cost",
          "max"
        ]
      },
      {
        "id": "TEST_0025",
        "name": "Boundary test: product_stock_quantity = 0",
        "type": "boundary",
        "description": "Test minimum value for product_stock_quantity",
        "test_data": {
          "product_stock_quantity": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "product_stock_quantity",
          "min"
        ]
      },
      {
        "id": "TEST_0026",
        "name": "Boundary test: product_stock_quantity < min",
        "type": "boundary",
        "description": "Test below minimum value for product_stock_quantity",
        "test_data": {
          "product_stock_quantity": -1
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "product_stock_quantity",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0027",
        "name": "Boundary test: product_stock_quantity = 999999",
        "type": "boundary",
        "description": "Test maximum value for product_stock_quantity",
        "test_data": {
          "product_stock_quantity": 999999
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "product_stock_quantity",
          "max"
        ]
      },
      {
        "id": "TEST_0028",
        "name": "Boundary test: product_created_at = 1640000000",
        "type": "boundary",
        "description": "Test minimum value for product_created_at",
        "test_data": {
          "product_created_at": 1640000000
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "product_created_at",
          "min"
        ]
      }
    ],
    "negative": [
      {
        "id": "TEST_0030",
        "name": "Type validation for product_sku",
        "type": "negative",
        "description": "Testing wrong type for product_sku",
        "test_data": {
          "product_sku": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_sku"
        ]
      },
      {
        "id": "TEST_0031",
        "name": "Type validation for product_price",
        "type": "negative",
        "description": "Testing wrong type for product_price",
        "test_data": {
          "product_price": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_price"
        ]
      },
      {
        "id": "TEST_0032",
        "name": "Type validation for product_cost",
        "type": "negative",
        "description": "Testing wrong type for product_cost",
        "test_data": {
          "product_cost": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_cost"
        ]
      },
      {
        "id": "TEST_0033",
        "name": "Type validation for product_stock_quantity",
        "type": "negative",
        "description": "Testing wrong type for product_stock_quantity",
        "test_data": {
          "product_stock_quantity": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_stock_quantity"
        ]
      },
      {
        "id": "TEST_0034",
        "name": "Type validation for product_created_at",
        "type": "negative",
        "description": "Testing wrong type for product_created_at",
        "test_data": {
          "product_created_at": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_created_at"
        ]
      },
      {
        "id": "TEST_0035",
        "name": "Type validation for product_release_date",
        "type": "negative",
        "description": "Testing wrong type for product_release_date",
        "test_data": {
          "product_release_date": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_release_date"
        ]
      },
      {
        "id": "TEST_0036",
        "name": "Type validation for product_categories (not array)",
        "type": "negative",
        "description": "Testing non-array value for collection product_categories",
        "test_data": {
          "product_categories": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_categories"
        ]
      },
      {
        "id": "TEST_0037",
        "name": "Type validation for product_is_active",
        "type": "negative",
        "description": "Testing wrong type for product_is_active",
        "test_data": {
          "product_is_active": "not_a_bool"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_is_active"
        ]
      },
      {
        "id": "TEST_0038",
        "name": "Type validation for product_supplier_email",
        "type": "negative",
        "description": "Testing wrong type for product_supplier_email",
        "test_data": {
          "product_supplier_email": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_supplier_email"
        ]
      },
      {
        "id": "TEST_0039",
        "name": "Type validation for product_warehouse_location",
        "type": "negative",
        "description": "Testing wrong type for product_warehouse_location",
        "test_data": {
          "product_warehouse_location": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "product_warehouse_location"
        ]
      },
      {
        "id": "TEST_0040",
        "name": "Type validation for order_order_id",
        "type": "negative",
        "description": "Testing wrong type for order_order_id",
        "test_data": {
          "order_order_id": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_order_id"
        ]
      },
      {
        "id": "TEST_0041",
        "name": "Type validation for order_customer_email",
        "type": "negative",
        "description": "Testing wrong type for order_customer_email",
        "test_data": {
          "order_customer_email": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_customer_email"
        ]
      },
      {
        "id": "TEST_0042",
        "name": "Type validation for order_items (not array)",
        "type": "negative",
        "description": "Testing non-array value for collection order_items",
        "test_data": {
          "order_items": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_items"
        ]
      },
      {
        "id": "TEST_0043",
        "name": "Type validation for order_subtotal",
        "type": "negative",
        "description": "Testing wrong type for order_subtotal",
        "test_data": {
          "order_subtotal": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_subtotal"
        ]
      },
      {
        "id": "TEST_0044",
        "name": "Type validation for order_tax_amount",
        "type": "negative",
        "description": "Testing wrong type for order_tax_amount",
        "test_data": {
          "order_tax_amount": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_tax_amount"
        ]
      },
      {
        "id": "TEST_0045",
        "name": "Type validation for order_shipping_cost",
        "type": "negative",
        "description": "Testing wrong type for order_shipping_cost",
        "test_data": {
          "order_shipping_cost": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_shipping_cost"
        ]
      },
      {
        "id": "TEST_0046",
        "name": "Type validation for order_total_amount",
        "type": "negative",
        "description": "Testing wrong type for order_total_amount",
        "test_data": {
          "order_total_amount": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_total_amount"
        ]
      },
      {
        "id": "TEST_0047",
        "name": "Type validation for order_discount_percentage",
        "type": "negative",
        "description": "Testing wrong type for order_discount_percentage",
        "test_data": {
          "order_discount_percentage": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_discount_percentage"
        ]
      },
      {
        "id": "TEST_0048",
        "name": "Type validation for order_order_date",
        "type": "negative",
        "description": "Testing wrong type for order_order_date",
        "test_data": {
          "order_order_date": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_order_date"
        ]
      },
      {
        "id": "TEST_0049",
        "name": "Type validation for order_shipping_date",
        "type": "negative",
        "description": "Testing wrong type for order_shipping_date",
        "test_data": {
          "order_shipping_date": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_shipping_date"
        ]
      },
      {
        "id": "TEST_0050",
        "name": "Type validation for order_delivery_date",
        "type": "negative",
        "description": "Testing wrong type for order_delivery_date",
        "test_data": {
          "order_delivery_date": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_delivery_date"
        ]
      },
      {
        "id": "TEST_0051",
        "name": "Type validation for order_status",
        "type": "negative",
        "description": "Testing wrong type for order_status",
        "test_data": {
          "order_status": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_status"
        ]
      },
      {
        "id": "TEST_0052",
        "name": "Type validation for order_payment_method",
        "type": "negative",
        "description": "Testing wrong type for order_payment_method",
        "test_data": {
          "order_payment_method": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_payment_method"
        ]
      },
      {
        "id": "TEST_0053",
        "name": "Type validation for order_shipping_address",
        "type": "negative",
        "description": "Testing wrong type for order_shipping_address",
        "test_data": {
          "order_shipping_address": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_shipping_address"
        ]
      },
      {
        "id": "TEST_0054",
        "name": "Type validation for order_billing_address",
        "type": "negative",
        "description": "Testing wrong type for order_billing_address",
        "test_data": {
          "order_billing_address": 12345
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_billing_address"
        ]
      }
    ],
    "state_transition": [
      {
        "id": "TEST_0055",
        "name": "OrderLifecycle: pending -> paid",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "pending",
          "orderlifecycle_event": "payment_received",
          "orderlifecycle_expected_state": "paid"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "transition",
          "orderlifecycle"
        ]
      },
      {
        "id": "TEST_0056",
        "name": "OrderLifecycle: pending -> cancelled",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "pending",
          "orderlifecycle_event": "cancel_order",
          "orderlifecycle_expected_state": "cancelled"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "transition",
          "orderlifecycle"
        ]
      },
      {
        "id": "TEST_0057",
        "name": "OrderLifecycle: paid -> processing",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "paid",
          "orderlifecycle_event": "start_processing",
          "orderlifecycle_expected_state": "processing"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "transition",
          "orderlifecycle"
        ]
      },
      {
        "id": "TEST_0058",
        "name": "OrderLifecycle: paid -> refunded",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "paid",
          "orderlifecycle_event": "refund_order",
          "orderlifecycle_expected_state": "refunded"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "transition",
          "orderlifecycle"
        ]
      },
      {
        "id": "TEST_0059",
        "name": "OrderLifecycle: processing -> shipped",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "processing",
          "orderlifecycle_event": "ship_order",
          "orderlifecycle_expected_state": "shipped"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "transition",
          "orderlifecycle"
        ]
      },
      {
        "id": "TEST_0060",
        "name": "OrderLifecycle: shipped -> delivered",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "shipped",
          "orderlifecycle_event": "mark_delivered",
          "orderlifecycle_expected_state": "delivered"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "transition",
          "orderlifecycle"
        ]
      },
      {
        "id": "TEST_0061",
        "name": "OrderLifecycle: shipped -> refunded",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "shipped",
          "orderlifecycle_event": "refund_after_shipping",
          "orderlifecycle_expected_state": "refunded"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "transition",
          "orderlifecycle"
        ]
      }
    ]
  }
}