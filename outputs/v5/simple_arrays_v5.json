{
  "meta": {
    "generator": "Unified DSL Test Generator v5.0",
    "domain": "Score Management System",
    "timestamp": "2025-07-11T00:29:31.232187",
    "dsl_file": "examples/basic/simple_arrays.yaml",
    "test_requirements_parsed": true
  },
  "summary": {
    "total_tests": 12,
    "test_distribution": {
      "functional": 2,
      "constraint_satisfaction": 1,
      "collection": 3,
      "boundary": 2,
      "negative": 4
    },
    "tag_distribution": {
      "functional": 2,
      "student": 2,
      "business_data": 1,
      "complete": 1,
      "constraint": 1,
      "satisfaction": 1,
      "collection": 3,
      "student_test_scores": 3,
      "empty": 1,
      "required_test": 3,
      "single": 2,
      "student_course_ids": 2,
      "boundary": 2,
      "student_id": 3,
      "min": 1,
      "below_min": 1,
      "negative": 5,
      "type_validation": 4,
      "student_is_active": 1
    },
    "priority_distribution": {
      "high": 6,
      "medium": 6
    },
    "requirements_coverage": {
      "test_requirements": [
        {
          "name": "Array tests",
          "type": "collection",
          "covered": true
        },
        {
          "name": "Boundary tests",
          "type": "boundary",
          "covered": true
        }
      ],
      "constraints": [
        {
          "constraint": "student_id >= 1",
          "covered": true
        },
        {
          "constraint": "size(student_test_scores) <= 10",
          "covered": false
        },
        {
          "constraint": "size(student_course_ids) >= 1",
          "covered": false
        }
      ],
      "rules": [
        {
          "rule": "Active students must have scores",
          "covered": false
        },
        {
          "rule": "Many courses means many tests",
          "covered": false
        }
      ]
    }
  },
  "test_suites": {
    "functional": [
      {
        "id": "TEST_0001",
        "name": "Create Student with valid business data",
        "type": "functional",
        "description": "Test creating Student with realistic data",
        "test_data": {
          "student_id": 912,
          "student_test_scores": [
            12
          ],
          "student_course_ids": [
            1001,
            1002,
            1003,
            1004
          ],
          "student_is_active": false
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "student",
          "business_data"
        ]
      },
      {
        "id": "TEST_0002",
        "name": "Create Student with all fields",
        "type": "functional",
        "description": "Test Student with all optional fields",
        "test_data": {
          "student_id": 291,
          "student_test_scores": [
            45,
            41,
            25,
            55,
            37,
            7,
            18,
            62
          ],
          "student_course_ids": [
            1005
          ],
          "student_is_active": true
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "student",
          "complete"
        ]
      }
    ],
    "constraint_satisfaction": [
      {
        "id": "TEST_0003",
        "name": "Constraint satisfaction: student_id >= 1",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "student_id": 71.11531856285592,
          "student_test_scores": [
            47,
            43,
            94
          ],
          "student_course_ids": [
            1006,
            1007,
            1008,
            1009,
            1010
          ],
          "student_is_active": true
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "student_id >= 1"
        ]
      }
    ],
    "collection": [
      {
        "id": "TEST_0004",
        "name": "Required test - Empty student_test_scores",
        "type": "collection",
        "description": "Test student_test_scores empty as required",
        "test_data": {
          "student_test_scores": []
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "student_test_scores",
          "empty",
          "required_test"
        ]
      },
      {
        "id": "TEST_0005",
        "name": "Required test - Single student_test_scores",
        "type": "collection",
        "description": "Test student_test_scores with single element as required",
        "test_data": {
          "student_test_scores": [
            42
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "student_test_scores",
          "single",
          "required_test"
        ]
      },
      {
        "id": "TEST_0006",
        "name": "Required test - Single student_course_ids",
        "type": "collection",
        "description": "Test student_course_ids with single element as required",
        "test_data": {
          "student_course_ids": [
            1011
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "student_course_ids",
          "single",
          "required_test"
        ]
      }
    ],
    "boundary": [
      {
        "id": "TEST_0007",
        "name": "Boundary test: student_id = 1",
        "type": "boundary",
        "description": "Test minimum value for student_id",
        "test_data": {
          "student_id": 1
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "student_id",
          "min"
        ]
      },
      {
        "id": "TEST_0008",
        "name": "Boundary test: student_id < min",
        "type": "boundary",
        "description": "Test below minimum value for student_id",
        "test_data": {
          "student_id": 0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "student_id",
          "below_min",
          "negative"
        ]
      }
    ],
    "negative": [
      {
        "id": "TEST_0011",
        "name": "Type validation for student_id",
        "type": "negative",
        "description": "Testing wrong type for student_id",
        "test_data": {
          "student_id": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_id"
        ]
      },
      {
        "id": "TEST_0012",
        "name": "Type validation for student_test_scores (not array)",
        "type": "negative",
        "description": "Testing non-array value for collection student_test_scores",
        "test_data": {
          "student_test_scores": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_test_scores"
        ]
      },
      {
        "id": "TEST_0013",
        "name": "Type validation for student_course_ids (not array)",
        "type": "negative",
        "description": "Testing non-array value for collection student_course_ids",
        "test_data": {
          "student_course_ids": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_course_ids"
        ]
      },
      {
        "id": "TEST_0014",
        "name": "Type validation for student_is_active",
        "type": "negative",
        "description": "Testing wrong type for student_is_active",
        "test_data": {
          "student_is_active": "not_a_bool"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "student_is_active"
        ]
      }
    ]
  }
}