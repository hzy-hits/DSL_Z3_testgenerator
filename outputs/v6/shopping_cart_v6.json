{
  "meta": {
    "generator": "Unified DSL Test Generator v6.0",
    "domain": "E-commerce Shopping Cart",
    "timestamp": "2025-07-11T00:40:17.052723",
    "dsl_file": "examples/intermediate/shopping_cart.yaml",
    "test_requirements_parsed": true
  },
  "summary": {
    "total_tests": 42,
    "test_distribution": {
      "boundary": 6,
      "collection": 9,
      "combinatorial": 4,
      "functional": 4,
      "constraint_satisfaction": 5,
      "constraint_violation": 5,
      "rule_activation": 2,
      "negative": 7
    },
    "tag_distribution": {
      "boundary": 6,
      "total_price": 3,
      "min": 3,
      "required_test": 12,
      "below_min": 3,
      "negative": 15,
      "id": 3,
      "price": 3,
      "collection": 9,
      "items": 4,
      "empty": 3,
      "single": 6,
      "discount_codes": 4,
      "categories": 4,
      "combinatorial": 4,
      "2way": 4,
      "is": 4,
      "discount": 4,
      "functional": 4,
      "cart": 2,
      "business_data": 2,
      "complete": 2,
      "product": 2,
      "constraint": 10,
      "satisfaction": 5,
      "violation": 5,
      "rule": 2,
      "activation": 2,
      "free_shipping_for_premium": 1,
      "bulk_discount": 1,
      "type_validation": 7,
      "is_premium_member": 1
    },
    "priority_distribution": {
      "medium": 22,
      "high": 20
    },
    "requirements_coverage": {
      "test_requirements": [
        {
          "name": "Cart boundary tests",
          "type": "boundary",
          "covered": true
        },
        {
          "name": "Collection tests",
          "type": "collection",
          "covered": true
        },
        {
          "name": "Discount combinations",
          "type": "combinatorial",
          "covered": true
        }
      ],
      "constraints": [
        {
          "constraint": "cart_total_price >= 0",
          "covered": true
        },
        {
          "constraint": "size(cart_items) <= 50",
          "covered": true
        },
        {
          "constraint": "size(cart_discount_codes) <= 5",
          "covered": true
        },
        {
          "constraint": "product_price > 0",
          "covered": true
        },
        {
          "constraint": "size(product_categories) >= 1",
          "covered": true
        }
      ],
      "rules": [
        {
          "rule": "Free shipping for premium",
          "covered": true
        },
        {
          "rule": "Bulk discount",
          "covered": true
        },
        {
          "rule": "Empty cart has zero total",
          "covered": false
        }
      ]
    }
  },
  "test_suites": {
    "boundary": [
      {
        "id": "TEST_0001",
        "name": "Boundary test: total_price = 0",
        "type": "boundary",
        "description": "Test minimum value for total_price",
        "test_data": {
          "cart_total_price": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "total_price",
          "min",
          "required_test"
        ]
      },
      {
        "id": "TEST_0002",
        "name": "Boundary test: total_price < min",
        "type": "boundary",
        "description": "Test below minimum value for total_price",
        "test_data": {
          "cart_total_price": -1
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "total_price",
          "below_min",
          "negative",
          "required_test"
        ]
      },
      {
        "id": "TEST_0003",
        "name": "Boundary test: id = 1",
        "type": "boundary",
        "description": "Test minimum value for id",
        "test_data": {
          "product_id": 1
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "id",
          "min",
          "required_test"
        ]
      },
      {
        "id": "TEST_0004",
        "name": "Boundary test: id < min",
        "type": "boundary",
        "description": "Test below minimum value for id",
        "test_data": {
          "product_id": 0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "id",
          "below_min",
          "negative",
          "required_test"
        ]
      },
      {
        "id": "TEST_0005",
        "name": "Boundary test: price = 0.01",
        "type": "boundary",
        "description": "Test minimum value for price",
        "test_data": {
          "product_price": 0.01
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "price",
          "min",
          "required_test"
        ]
      },
      {
        "id": "TEST_0006",
        "name": "Boundary test: price < min",
        "type": "boundary",
        "description": "Test below minimum value for price",
        "test_data": {
          "product_price": -0.99
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "price",
          "below_min",
          "negative",
          "required_test"
        ]
      }
    ],
    "collection": [
      {
        "id": "TEST_0007",
        "name": "Required test - Empty items",
        "type": "collection",
        "description": "Test items empty as required",
        "test_data": {
          "cart_items": []
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "items",
          "empty",
          "required_test"
        ]
      },
      {
        "id": "TEST_0008",
        "name": "Required test - Single items",
        "type": "collection",
        "description": "Test items with single element as required",
        "test_data": {
          "cart_items": [
            1001
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "items",
          "single",
          "required_test"
        ]
      },
      {
        "id": "TEST_0009",
        "name": "Required test - Empty discount_codes",
        "type": "collection",
        "description": "Test discount_codes empty as required",
        "test_data": {
          "cart_discount_codes": []
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "discount_codes",
          "empty",
          "required_test"
        ]
      },
      {
        "id": "TEST_0010",
        "name": "Required test - Single discount_codes",
        "type": "collection",
        "description": "Test discount_codes with single element as required",
        "test_data": {
          "cart_discount_codes": [
            "WELCOME5"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "discount_codes",
          "single",
          "required_test"
        ]
      },
      {
        "id": "TEST_0011",
        "name": "Required test - Empty categories",
        "type": "collection",
        "description": "Test categories empty as required",
        "test_data": {
          "product_categories": []
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "categories",
          "empty",
          "required_test"
        ]
      },
      {
        "id": "TEST_0012",
        "name": "Required test - Single categories",
        "type": "collection",
        "description": "Test categories with single element as required",
        "test_data": {
          "product_categories": [
            "beauty"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "categories",
          "single",
          "required_test"
        ]
      },
      {
        "id": "TEST_0044",
        "name": "Required test - Single items",
        "type": "collection",
        "description": "Test items with single element as required",
        "test_data": {
          "cart_items": [
            1079
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "items",
          "single"
        ]
      },
      {
        "id": "TEST_0046",
        "name": "Required test - Single discount_codes",
        "type": "collection",
        "description": "Test discount_codes with single element as required",
        "test_data": {
          "cart_discount_codes": [
            "VIP20"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "discount_codes",
          "single"
        ]
      },
      {
        "id": "TEST_0048",
        "name": "Required test - Single categories",
        "type": "collection",
        "description": "Test categories with single element as required",
        "test_data": {
          "product_categories": [
            "food"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "categories",
          "single"
        ]
      }
    ],
    "combinatorial": [
      {
        "id": "TEST_0013",
        "name": "2-way combination #1: is × discount",
        "type": "combinatorial",
        "description": "Test combination of is and discount",
        "test_data": {
          "cart_is_premium_member": true,
          "cart_discount_codes": []
        },
        "expected_result": "pass",
        "priority": 5,
        "tags": [
          "combinatorial",
          "2way",
          "is",
          "discount"
        ]
      },
      {
        "id": "TEST_0014",
        "name": "2-way combination #2: is × discount",
        "type": "combinatorial",
        "description": "Test combination of is and discount",
        "test_data": {
          "cart_is_premium_member": true,
          "cart_discount_codes": [
            "COMBO10"
          ]
        },
        "expected_result": "pass",
        "priority": 5,
        "tags": [
          "combinatorial",
          "2way",
          "is",
          "discount"
        ]
      },
      {
        "id": "TEST_0015",
        "name": "2-way combination #3: is × discount",
        "type": "combinatorial",
        "description": "Test combination of is and discount",
        "test_data": {
          "cart_is_premium_member": false,
          "cart_discount_codes": []
        },
        "expected_result": "pass",
        "priority": 5,
        "tags": [
          "combinatorial",
          "2way",
          "is",
          "discount"
        ]
      },
      {
        "id": "TEST_0016",
        "name": "2-way combination #4: is × discount",
        "type": "combinatorial",
        "description": "Test combination of is and discount",
        "test_data": {
          "cart_is_premium_member": false,
          "cart_discount_codes": [
            "COMBO10"
          ]
        },
        "expected_result": "pass",
        "priority": 5,
        "tags": [
          "combinatorial",
          "2way",
          "is",
          "discount"
        ]
      }
    ],
    "functional": [
      {
        "id": "TEST_0017",
        "name": "Create Cart with valid business data",
        "type": "functional",
        "description": "Test creating Cart with realistic data",
        "test_data": {
          "cart_items": [
            1006,
            1007,
            1008
          ],
          "cart_total_price": 99.99,
          "cart_discount_codes": [
            "VIP20",
            "BULK15",
            "MEMBER10"
          ],
          "cart_is_premium_member": true
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "cart",
          "business_data"
        ]
      },
      {
        "id": "TEST_0018",
        "name": "Create Cart with all fields",
        "type": "functional",
        "description": "Test Cart with all optional fields",
        "test_data": {
          "cart_items": [
            1009,
            1010,
            1011,
            1012,
            1013,
            1014,
            1015,
            1016
          ],
          "cart_total_price": 29.99,
          "cart_discount_codes": [],
          "cart_is_premium_member": true
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "cart",
          "complete"
        ]
      },
      {
        "id": "TEST_0019",
        "name": "Create Product with valid business data",
        "type": "functional",
        "description": "Test creating Product with realistic data",
        "test_data": {
          "product_id": 1017,
          "product_price": 29.99,
          "product_categories": [
            "beauty",
            "books",
            "toys",
            "clothing",
            "home",
            "food"
          ]
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "product",
          "business_data"
        ]
      },
      {
        "id": "TEST_0020",
        "name": "Create Product with all fields",
        "type": "functional",
        "description": "Test Product with all optional fields",
        "test_data": {
          "product_id": 1018,
          "product_price": 80.3,
          "product_categories": [
            "home",
            "electronics",
            "clothing",
            "sports",
            "food",
            "toys",
            "beauty",
            "books"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "product",
          "complete"
        ]
      }
    ],
    "constraint_satisfaction": [
      {
        "id": "TEST_0021",
        "name": "Constraint satisfaction: cart_total_price >= 0",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "cart_total_price": 8.99
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "cart_total_price >= 0"
        ]
      },
      {
        "id": "TEST_0023",
        "name": "Constraint satisfaction: size(cart_items) <= 50",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "cart_items": [
            1019,
            1020,
            1021,
            1022,
            1023,
            1024,
            1025,
            1026,
            1027,
            1028,
            1029,
            1030,
            1031,
            1032,
            1033,
            1034,
            1035,
            1036,
            1037,
            1038,
            1039,
            1040,
            1041,
            1042,
            1043,
            1044,
            1045,
            1046,
            1047,
            1048,
            1049,
            1050,
            1051,
            1052,
            1053,
            1054,
            1055,
            1056,
            1057,
            1058,
            1059,
            1060,
            1061,
            1062,
            1063,
            1064,
            1065,
            1066,
            1067,
            1068
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "size(cart_items) <= 50"
        ]
      },
      {
        "id": "TEST_0025",
        "name": "Constraint satisfaction: size(cart_discount_codes) <= 5",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "cart_discount_codes": [
            "item_0",
            "item_1",
            "item_2",
            "item_3",
            "item_4"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "size(cart_discount_codes) <= 5"
        ]
      },
      {
        "id": "TEST_0027",
        "name": "Constraint satisfaction: product_price > 0",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "product_price": 5.06
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "product_price > 0"
        ]
      },
      {
        "id": "TEST_0029",
        "name": "Constraint satisfaction: size(product_categories) >= 1",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "product_categories": [
            "books"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "size(product_categories) >= 1"
        ]
      }
    ],
    "constraint_violation": [
      {
        "id": "TEST_0022",
        "name": "Constraint violation: cart_total_price >= 0",
        "type": "constraint_violation",
        "description": "Test constraint is violated",
        "test_data": {
          "cart_total_price": -1.0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "constraint",
          "violation",
          "negative"
        ],
        "constraints_tested": [
          "cart_total_price >= 0"
        ]
      },
      {
        "id": "TEST_0024",
        "name": "Constraint violation: size(cart_items) <= 50",
        "type": "constraint_violation",
        "description": "Test constraint is violated",
        "test_data": {
          "size(cart_items)": 51.0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "constraint",
          "violation",
          "negative"
        ],
        "constraints_tested": [
          "size(cart_items) <= 50"
        ]
      },
      {
        "id": "TEST_0026",
        "name": "Constraint violation: size(cart_discount_codes) <= 5",
        "type": "constraint_violation",
        "description": "Test constraint is violated",
        "test_data": {
          "size(cart_discount_codes)": 6.0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "constraint",
          "violation",
          "negative"
        ],
        "constraints_tested": [
          "size(cart_discount_codes) <= 5"
        ]
      },
      {
        "id": "TEST_0028",
        "name": "Constraint violation: product_price > 0",
        "type": "constraint_violation",
        "description": "Test constraint is violated",
        "test_data": {
          "product_price": 0.0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "constraint",
          "violation",
          "negative"
        ],
        "constraints_tested": [
          "product_price > 0"
        ]
      },
      {
        "id": "TEST_0030",
        "name": "Constraint violation: size(product_categories) >= 1",
        "type": "constraint_violation",
        "description": "Test constraint is violated",
        "test_data": {
          "size(product_categories)": 0.0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "constraint",
          "violation",
          "negative"
        ],
        "constraints_tested": [
          "size(product_categories) >= 1"
        ]
      }
    ],
    "rule_activation": [
      {
        "id": "TEST_0037",
        "name": "Rule activation: Free shipping for premium",
        "type": "rule_activation",
        "description": "Test Free shipping for premium when condition is true",
        "test_data": {},
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "free_shipping_for_premium"
        ],
        "rules_tested": [
          "Free shipping for premium"
        ]
      },
      {
        "id": "TEST_0039",
        "name": "Rule activation: Bulk discount",
        "type": "rule_activation",
        "description": "Test Bulk discount when condition is true",
        "test_data": {
          "cart_items": [
            1069,
            1070,
            1071,
            1072,
            1073,
            1074,
            1075,
            1076,
            1077,
            1078
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "bulk_discount"
        ],
        "rules_tested": [
          "Bulk discount"
        ]
      }
    ],
    "negative": [
      {
        "id": "TEST_0049",
        "name": "Type validation for items",
        "type": "negative",
        "description": "Testing wrong type for items",
        "test_data": {
          "cart_items": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "items"
        ]
      },
      {
        "id": "TEST_0050",
        "name": "Type validation for total_price",
        "type": "negative",
        "description": "Testing wrong type for total_price",
        "test_data": {
          "cart_total_price": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "total_price"
        ]
      },
      {
        "id": "TEST_0051",
        "name": "Type validation for discount_codes",
        "type": "negative",
        "description": "Testing wrong type for discount_codes",
        "test_data": {
          "cart_discount_codes": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "discount_codes"
        ]
      },
      {
        "id": "TEST_0052",
        "name": "Type validation for is_premium_member",
        "type": "negative",
        "description": "Testing wrong type for is_premium_member",
        "test_data": {
          "cart_is_premium_member": "not_a_bool"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "is_premium_member"
        ]
      },
      {
        "id": "TEST_0053",
        "name": "Type validation for id",
        "type": "negative",
        "description": "Testing wrong type for id",
        "test_data": {
          "product_id": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "id"
        ]
      },
      {
        "id": "TEST_0054",
        "name": "Type validation for price",
        "type": "negative",
        "description": "Testing wrong type for price",
        "test_data": {
          "product_price": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "price"
        ]
      },
      {
        "id": "TEST_0055",
        "name": "Type validation for categories",
        "type": "negative",
        "description": "Testing wrong type for categories",
        "test_data": {
          "product_categories": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "categories"
        ]
      }
    ]
  }
}