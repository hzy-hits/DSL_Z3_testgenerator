{
  "meta": {
    "generator": "Unified DSL Test Generator v7.0",
    "domain": "Advanced E-commerce Platform",
    "timestamp": "2025-07-11T07:42:37.552001",
    "dsl_file": "examples/advanced/advanced_ecommerce.yaml",
    "test_requirements_parsed": false
  },
  "summary": {
    "total_tests": 77,
    "test_distribution": {
      "functional": 6,
      "collection": 6,
      "constraint_satisfaction": 12,
      "constraint_violation": 3,
      "boundary": 19,
      "rule_activation": 4,
      "rule_deactivation": 4,
      "negative": 16,
      "state_transition": 7
    },
    "tag_distribution": {
      "functional": 6,
      "default_test": 6,
      "product": 3,
      "collection": 6,
      "categories": 4,
      "empty": 2,
      "single": 4,
      "order": 3,
      "items": 4,
      "business_data": 2,
      "complete": 2,
      "constraint": 15,
      "satisfaction": 12,
      "violation": 3,
      "negative": 28,
      "boundary": 19,
      "price": 3,
      "min": 10,
      "below_min": 9,
      "cost": 3,
      "stock_quantity": 2,
      "created_at": 3,
      "release_date": 2,
      "subtotal": 3,
      "tax_amount": 2,
      "shipping_cost": 2,
      "total_amount": 3,
      "discount_percentage": 3,
      "order_date": 2,
      "shipping_date": 2,
      "delivery_date": 2,
      "rule": 8,
      "activation": 4,
      "free_shipping_for_large_orders": 2,
      "deactivation": 4,
      "vip_discount": 2,
      "tax_calculation": 2,
      "stock_alert": 2,
      "type_validation": 16,
      "is_active": 1,
      "state_machine": 7,
      "orderlifecycle": 7,
      "transition": 7
    },
    "priority_distribution": {
      "high": 28,
      "medium": 49
    },
    "requirements_coverage": {
      "test_requirements": [],
      "constraints": [
        {
          "constraint": "Product.price > Product.cost",
          "covered": true
        },
        {
          "constraint": "Product.stock_quantity >= 0",
          "covered": true
        },
        {
          "constraint": "Order.total_amount == Order.subtotal + Order.tax_amount + Order.shipping_cost - (Order.subtotal * Order.discount_percentage / 100)",
          "covered": true
        },
        {
          "constraint": "Order.tax_amount >= 0",
          "covered": true
        },
        {
          "constraint": "Order.shipping_cost >= 0",
          "covered": true
        },
        {
          "constraint": "size(Order.items) > 0",
          "covered": true
        },
        {
          "constraint": "Product.release_date >= Product.created_at",
          "covered": true
        },
        {
          "constraint": "Order.shipping_date >= Order.order_date",
          "covered": true
        },
        {
          "constraint": "Order.delivery_date >= Order.shipping_date",
          "covered": true
        },
        {
          "constraint": "(Order.status == 'shipped' || Order.status == 'delivered') => Order.shipping_date != null",
          "covered": true
        },
        {
          "constraint": "Order.status == 'delivered' => Order.delivery_date != null",
          "covered": true
        },
        {
          "constraint": "Order.discount_percentage > 50 => Order.total_amount > 100",
          "covered": true
        }
      ],
      "rules": [
        {
          "rule": "Free Shipping for Large Orders",
          "covered": true
        },
        {
          "rule": "VIP Discount",
          "covered": true
        },
        {
          "rule": "Tax Calculation",
          "covered": true
        },
        {
          "rule": "Stock Alert",
          "covered": true
        },
        {
          "rule": "Auto Deactivate Out of Stock",
          "covered": false
        }
      ]
    }
  },
  "test_suites": {
    "functional": [
      {
        "id": "TEST_0001",
        "name": "Default functional test for Product",
        "type": "functional",
        "description": "Basic functionality test for Product",
        "test_data": {
          "product_sku": "sku_value_59",
          "product_price": 776.98,
          "product_cost": 232.33,
          "product_stock_quantity": 723869,
          "product_created_at": 17,
          "product_release_date": 38,
          "product_categories": [
            "category3",
            "category1",
            "category2"
          ],
          "product_is_active": false,
          "product_supplier_email": "user954@example.com",
          "product_warehouse_location": "US-EAST"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "default_test",
          "product"
        ]
      },
      {
        "id": "TEST_0004",
        "name": "Default functional test for Order",
        "type": "functional",
        "description": "Basic functionality test for Order",
        "test_data": {
          "order_order_id": 10001,
          "order_customer_email": "user455@example.com",
          "order_items": [
            1001,
            1002,
            1003,
            1004
          ],
          "order_subtotal": 700.03,
          "order_tax_amount": 288.9,
          "order_shipping_cost": 259.84,
          "order_total_amount": 339.49,
          "order_discount_percentage": 6,
          "order_order_date": 89,
          "order_shipping_date": 85,
          "order_delivery_date": 93,
          "order_status": "refunded",
          "order_payment_method": "apple_pay",
          "order_shipping_address": "shipping_address_value_8",
          "order_billing_address": "billing_address_value_87"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "default_test",
          "order"
        ]
      },
      {
        "id": "TEST_0007",
        "name": "Create Product with valid business data",
        "type": "functional",
        "description": "Test creating Product with realistic data",
        "test_data": {
          "product_sku": "sku_value_49",
          "product_price": 899.26,
          "product_cost": 57.78,
          "product_stock_quantity": 860112,
          "product_created_at": 80,
          "product_categories": [
            "category3",
            "category2",
            "category1"
          ],
          "product_is_active": false,
          "product_supplier_email": "user228@example.com",
          "product_warehouse_location": "US-WEST"
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "product",
          "business_data"
        ]
      },
      {
        "id": "TEST_0008",
        "name": "Create Product with all fields",
        "type": "functional",
        "description": "Test Product with all optional fields",
        "test_data": {
          "product_sku": "sku_value_26",
          "product_price": 670.26,
          "product_cost": 425.86,
          "product_stock_quantity": 362985,
          "product_created_at": 73,
          "product_release_date": 55,
          "product_categories": [
            "category1"
          ],
          "product_is_active": true,
          "product_supplier_email": "user129@example.com",
          "product_warehouse_location": "ASIA-PACIFIC"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "product",
          "complete"
        ]
      },
      {
        "id": "TEST_0009",
        "name": "Create Order with valid business data",
        "type": "functional",
        "description": "Test creating Order with realistic data",
        "test_data": {
          "order_order_id": 10002,
          "order_customer_email": "user693@example.com",
          "order_items": [
            1005,
            1006,
            1007,
            1008,
            1009
          ],
          "order_subtotal": 679.48,
          "order_tax_amount": 398.6,
          "order_shipping_cost": 79.25,
          "order_total_amount": 960.51,
          "order_discount_percentage": 72,
          "order_order_date": 78,
          "order_status": "delivered",
          "order_payment_method": "paypal",
          "order_shipping_address": "shipping_address_value_75"
        },
        "expected_result": "pass",
        "priority": 9,
        "tags": [
          "functional",
          "order",
          "business_data"
        ]
      },
      {
        "id": "TEST_0010",
        "name": "Create Order with all fields",
        "type": "functional",
        "description": "Test Order with all optional fields",
        "test_data": {
          "order_order_id": 10003,
          "order_customer_email": "user116@example.com",
          "order_items": [
            1010,
            1011,
            1012,
            1013,
            1014
          ],
          "order_subtotal": 341.21,
          "order_tax_amount": 398.97,
          "order_shipping_cost": 388.47,
          "order_total_amount": 87.49,
          "order_discount_percentage": 68,
          "order_order_date": 81,
          "order_shipping_date": 72,
          "order_delivery_date": 4,
          "order_status": "refunded",
          "order_payment_method": "credit_card",
          "order_shipping_address": "shipping_address_value_35",
          "order_billing_address": "billing_address_value_60"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "functional",
          "order",
          "complete"
        ]
      }
    ],
    "collection": [
      {
        "id": "TEST_0002",
        "name": "Required test - Empty categories",
        "type": "collection",
        "description": "Test categories empty as required",
        "test_data": {
          "product_categories": []
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "categories",
          "empty",
          "default_test"
        ]
      },
      {
        "id": "TEST_0003",
        "name": "Required test - Single categories",
        "type": "collection",
        "description": "Test categories with single element as required",
        "test_data": {
          "product_categories": [
            "category3"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "categories",
          "single",
          "default_test"
        ]
      },
      {
        "id": "TEST_0005",
        "name": "Required test - Empty items",
        "type": "collection",
        "description": "Test items empty as required",
        "test_data": {
          "order_items": []
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "items",
          "empty",
          "default_test"
        ]
      },
      {
        "id": "TEST_0006",
        "name": "Required test - Single items",
        "type": "collection",
        "description": "Test items with single element as required",
        "test_data": {
          "order_items": [
            "item_0"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "items",
          "single",
          "default_test"
        ]
      },
      {
        "id": "TEST_0059",
        "name": "Required test - Single categories",
        "type": "collection",
        "description": "Test categories with single element as required",
        "test_data": {
          "product_categories": [
            "item_0"
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "categories",
          "single"
        ]
      },
      {
        "id": "TEST_0061",
        "name": "Required test - Single items",
        "type": "collection",
        "description": "Test items with single element as required",
        "test_data": {
          "order_items": [
            1019
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "collection",
          "items",
          "single"
        ]
      }
    ],
    "constraint_satisfaction": [
      {
        "id": "TEST_0011",
        "name": "Constraint satisfaction: Product.price > Product.cost",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "product_cost": 16.37,
          "product_price": 29.92
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Product.price > Product.cost"
        ]
      },
      {
        "id": "TEST_0012",
        "name": "Constraint satisfaction: Product.stock_quantity >= 0",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "product_stock_quantity": 6.45
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Product.stock_quantity >= 0"
        ]
      },
      {
        "id": "TEST_0014",
        "name": "Constraint satisfaction: Order.total_amount == Order.subtotal + Order.ta...",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_total_amount": 50,
          "order_subtotal + order": 50
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.total_amount == Order.subtotal + Order.tax_amount + Order.shipping_cost - (Order.subtotal * Order.discount_percentage / 100)"
        ]
      },
      {
        "id": "TEST_0015",
        "name": "Constraint satisfaction: Order.tax_amount >= 0",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_tax_amount": 4.6
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.tax_amount >= 0"
        ]
      },
      {
        "id": "TEST_0017",
        "name": "Constraint satisfaction: Order.shipping_cost >= 0",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_shipping_cost": 3.6
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.shipping_cost >= 0"
        ]
      },
      {
        "id": "TEST_0019",
        "name": "Constraint satisfaction: size(Order.items) > 0",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_items": [
            1015,
            1016,
            1017,
            1018
          ]
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "size(Order.items) > 0"
        ]
      },
      {
        "id": "TEST_0020",
        "name": "Constraint satisfaction: Product.release_date >= Product.created_at",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "product_created_at": "2025-06-11",
          "product_release_date": "2025-06-16"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Product.release_date >= Product.created_at"
        ]
      },
      {
        "id": "TEST_0021",
        "name": "Constraint satisfaction: Order.shipping_date >= Order.order_date",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_order_date": "2025-06-11",
          "order_shipping_date": "2025-06-16"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.shipping_date >= Order.order_date"
        ]
      },
      {
        "id": "TEST_0022",
        "name": "Constraint satisfaction: Order.delivery_date >= Order.shipping_date",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_shipping_date": "2025-06-11",
          "order_delivery_date": "2025-06-16"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.delivery_date >= Order.shipping_date"
        ]
      },
      {
        "id": "TEST_0023",
        "name": "Constraint satisfaction: (Order.status == 'shipped' || Order.status == '...",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "(order_status": 50,
          "'shipped' || order_status == 'delivered')": 50,
          "order_shipping_date": "2025-07-11"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "(Order.status == 'shipped' || Order.status == 'delivered') => Order.shipping_date != null"
        ]
      },
      {
        "id": "TEST_0024",
        "name": "Constraint satisfaction: Order.status == 'delivered' => Order.delivery_d...",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_status": "delivered",
          "order_delivery_date": "2025-07-11"
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.status == 'delivered' => Order.delivery_date != null"
        ]
      },
      {
        "id": "TEST_0025",
        "name": "Constraint satisfaction: Order.discount_percentage > 50 => Order.total_a...",
        "type": "constraint_satisfaction",
        "description": "Test constraint is satisfied",
        "test_data": {
          "order_discount_percentage": 57,
          "order_total_amount": 104.69
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "constraint",
          "satisfaction"
        ],
        "constraints_tested": [
          "Order.discount_percentage > 50 => Order.total_amount > 100"
        ]
      }
    ],
    "constraint_violation": [
      {
        "id": "TEST_0013",
        "name": "Constraint violation: Product.stock_quantity >= 0",
        "type": "constraint_violation",
        "description": "Test constraint is violated",
        "test_data": {
          "product_stock_quantity": 0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "constraint",
          "violation",
          "negative"
        ],
        "constraints_tested": [
          "Product.stock_quantity >= 0"
        ]
      },
      {
        "id": "TEST_0016",
        "name": "Constraint violation: Order.tax_amount >= 0",
        "type": "constraint_violation",
        "description": "Test constraint is violated",
        "test_data": {
          "order_tax_amount": 0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "constraint",
          "violation",
          "negative"
        ],
        "constraints_tested": [
          "Order.tax_amount >= 0"
        ]
      },
      {
        "id": "TEST_0018",
        "name": "Constraint violation: Order.shipping_cost >= 0",
        "type": "constraint_violation",
        "description": "Test constraint is violated",
        "test_data": {
          "order_shipping_cost": 0
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "constraint",
          "violation",
          "negative"
        ],
        "constraints_tested": [
          "Order.shipping_cost >= 0"
        ]
      }
    ],
    "boundary": [
      {
        "id": "TEST_0026",
        "name": "Boundary test: price = 0.01",
        "type": "boundary",
        "description": "Test minimum value for price",
        "test_data": {
          "product_price": 0.01
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "price",
          "min"
        ]
      },
      {
        "id": "TEST_0027",
        "name": "Boundary test: price < min",
        "type": "boundary",
        "description": "Test below minimum value for price",
        "test_data": {
          "product_price": -0.99
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "price",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0028",
        "name": "Boundary test: cost = 0.01",
        "type": "boundary",
        "description": "Test minimum value for cost",
        "test_data": {
          "product_cost": 0.01
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "cost",
          "min"
        ]
      },
      {
        "id": "TEST_0029",
        "name": "Boundary test: cost < min",
        "type": "boundary",
        "description": "Test below minimum value for cost",
        "test_data": {
          "product_cost": -0.99
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "cost",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0031",
        "name": "Boundary test: stock_quantity < min",
        "type": "boundary",
        "description": "Test below minimum value for stock_quantity",
        "test_data": {
          "product_stock_quantity": -1
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "stock_quantity",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0032",
        "name": "Boundary test: created_at = 0",
        "type": "boundary",
        "description": "Test minimum value for created_at",
        "test_data": {
          "product_created_at": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "created_at",
          "min"
        ]
      },
      {
        "id": "TEST_0033",
        "name": "Boundary test: created_at < min",
        "type": "boundary",
        "description": "Test below minimum value for created_at",
        "test_data": {
          "product_created_at": 1639999999
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "created_at",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0034",
        "name": "Boundary test: release_date = 0",
        "type": "boundary",
        "description": "Test minimum value for release_date",
        "test_data": {
          "product_release_date": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "release_date",
          "min"
        ]
      },
      {
        "id": "TEST_0035",
        "name": "Boundary test: subtotal = 0.01",
        "type": "boundary",
        "description": "Test minimum value for subtotal",
        "test_data": {
          "order_subtotal": 0.01
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "subtotal",
          "min"
        ]
      },
      {
        "id": "TEST_0036",
        "name": "Boundary test: subtotal < min",
        "type": "boundary",
        "description": "Test below minimum value for subtotal",
        "test_data": {
          "order_subtotal": -0.99
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "subtotal",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0038",
        "name": "Boundary test: tax_amount < min",
        "type": "boundary",
        "description": "Test below minimum value for tax_amount",
        "test_data": {
          "order_tax_amount": -1
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "tax_amount",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0040",
        "name": "Boundary test: shipping_cost < min",
        "type": "boundary",
        "description": "Test below minimum value for shipping_cost",
        "test_data": {
          "order_shipping_cost": -1
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "shipping_cost",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0041",
        "name": "Boundary test: total_amount = 0.01",
        "type": "boundary",
        "description": "Test minimum value for total_amount",
        "test_data": {
          "order_total_amount": 0.01
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "total_amount",
          "min"
        ]
      },
      {
        "id": "TEST_0042",
        "name": "Boundary test: total_amount < min",
        "type": "boundary",
        "description": "Test below minimum value for total_amount",
        "test_data": {
          "order_total_amount": -0.99
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "total_amount",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0043",
        "name": "Boundary test: discount_percentage = 0",
        "type": "boundary",
        "description": "Test minimum value for discount_percentage",
        "test_data": {
          "order_discount_percentage": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "discount_percentage",
          "min"
        ]
      },
      {
        "id": "TEST_0044",
        "name": "Boundary test: discount_percentage < min",
        "type": "boundary",
        "description": "Test below minimum value for discount_percentage",
        "test_data": {
          "order_discount_percentage": -1
        },
        "expected_result": "fail",
        "priority": 7,
        "tags": [
          "boundary",
          "discount_percentage",
          "below_min",
          "negative"
        ]
      },
      {
        "id": "TEST_0045",
        "name": "Boundary test: order_date = 0",
        "type": "boundary",
        "description": "Test minimum value for order_date",
        "test_data": {
          "order_order_date": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "order_date",
          "min"
        ]
      },
      {
        "id": "TEST_0046",
        "name": "Boundary test: shipping_date = 0",
        "type": "boundary",
        "description": "Test minimum value for shipping_date",
        "test_data": {
          "order_shipping_date": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "shipping_date",
          "min"
        ]
      },
      {
        "id": "TEST_0047",
        "name": "Boundary test: delivery_date = 0",
        "type": "boundary",
        "description": "Test minimum value for delivery_date",
        "test_data": {
          "order_delivery_date": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "boundary",
          "delivery_date",
          "min"
        ]
      }
    ],
    "rule_activation": [
      {
        "id": "TEST_0048",
        "name": "Rule activation: Free Shipping for Large Orders",
        "type": "rule_activation",
        "description": "Test Free Shipping for Large Orders when condition is true",
        "test_data": {
          "order_subtotal": 101.47
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "free_shipping_for_large_orders"
        ],
        "rules_tested": [
          "Free Shipping for Large Orders"
        ]
      },
      {
        "id": "TEST_0050",
        "name": "Rule activation: VIP Discount",
        "type": "rule_activation",
        "description": "Test VIP Discount when condition is true",
        "test_data": {
          "order_subtotal": 509.37
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "vip_discount"
        ],
        "rules_tested": [
          "VIP Discount"
        ]
      },
      {
        "id": "TEST_0052",
        "name": "Rule activation: Tax Calculation",
        "type": "rule_activation",
        "description": "Test Tax Calculation when condition is true",
        "test_data": {
          "order_subtotal": 4.69
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "tax_calculation"
        ],
        "rules_tested": [
          "Tax Calculation"
        ]
      },
      {
        "id": "TEST_0054",
        "name": "Rule activation: Stock Alert",
        "type": "rule_activation",
        "description": "Test Stock Alert when condition is true",
        "test_data": {
          "product_stock_quantity": 7.4
        },
        "expected_result": "pass",
        "priority": 8,
        "tags": [
          "rule",
          "activation",
          "stock_alert"
        ],
        "rules_tested": [
          "Stock Alert"
        ]
      }
    ],
    "rule_deactivation": [
      {
        "id": "TEST_0049",
        "name": "Rule deactivation: Free Shipping for Large Orders",
        "type": "rule_deactivation",
        "description": "Test Free Shipping for Large Orders when condition is false",
        "test_data": {
          "order_subtotal": 99.0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "rule",
          "deactivation",
          "free_shipping_for_large_orders"
        ],
        "rules_tested": [
          "Free Shipping for Large Orders"
        ]
      },
      {
        "id": "TEST_0051",
        "name": "Rule deactivation: VIP Discount",
        "type": "rule_deactivation",
        "description": "Test VIP Discount when condition is false",
        "test_data": {
          "order_subtotal": 499.0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "rule",
          "deactivation",
          "vip_discount"
        ],
        "rules_tested": [
          "VIP Discount"
        ]
      },
      {
        "id": "TEST_0053",
        "name": "Rule deactivation: Tax Calculation",
        "type": "rule_deactivation",
        "description": "Test Tax Calculation when condition is false",
        "test_data": {
          "order_subtotal": 0
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "rule",
          "deactivation",
          "tax_calculation"
        ],
        "rules_tested": [
          "Tax Calculation"
        ]
      },
      {
        "id": "TEST_0055",
        "name": "Rule deactivation: Stock Alert",
        "type": "rule_deactivation",
        "description": "Test Stock Alert when condition is false",
        "test_data": {},
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "rule",
          "deactivation",
          "stock_alert"
        ],
        "rules_tested": [
          "Stock Alert"
        ]
      }
    ],
    "negative": [
      {
        "id": "TEST_0062",
        "name": "Type validation for price",
        "type": "negative",
        "description": "Testing wrong type for price",
        "test_data": {
          "product_price": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "price"
        ]
      },
      {
        "id": "TEST_0063",
        "name": "Type validation for cost",
        "type": "negative",
        "description": "Testing wrong type for cost",
        "test_data": {
          "product_cost": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "cost"
        ]
      },
      {
        "id": "TEST_0064",
        "name": "Type validation for stock_quantity",
        "type": "negative",
        "description": "Testing wrong type for stock_quantity",
        "test_data": {
          "product_stock_quantity": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "stock_quantity"
        ]
      },
      {
        "id": "TEST_0065",
        "name": "Type validation for created_at",
        "type": "negative",
        "description": "Testing wrong type for created_at",
        "test_data": {
          "product_created_at": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "created_at"
        ]
      },
      {
        "id": "TEST_0066",
        "name": "Type validation for release_date",
        "type": "negative",
        "description": "Testing wrong type for release_date",
        "test_data": {
          "product_release_date": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "release_date"
        ]
      },
      {
        "id": "TEST_0067",
        "name": "Type validation for categories",
        "type": "negative",
        "description": "Testing wrong type for categories",
        "test_data": {
          "product_categories": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "categories"
        ]
      },
      {
        "id": "TEST_0068",
        "name": "Type validation for is_active",
        "type": "negative",
        "description": "Testing wrong type for is_active",
        "test_data": {
          "product_is_active": "not_a_bool"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "is_active"
        ]
      },
      {
        "id": "TEST_0069",
        "name": "Type validation for items",
        "type": "negative",
        "description": "Testing wrong type for items",
        "test_data": {
          "order_items": "not_an_array"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "items"
        ]
      },
      {
        "id": "TEST_0070",
        "name": "Type validation for subtotal",
        "type": "negative",
        "description": "Testing wrong type for subtotal",
        "test_data": {
          "order_subtotal": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "subtotal"
        ]
      },
      {
        "id": "TEST_0071",
        "name": "Type validation for tax_amount",
        "type": "negative",
        "description": "Testing wrong type for tax_amount",
        "test_data": {
          "order_tax_amount": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "tax_amount"
        ]
      },
      {
        "id": "TEST_0072",
        "name": "Type validation for shipping_cost",
        "type": "negative",
        "description": "Testing wrong type for shipping_cost",
        "test_data": {
          "order_shipping_cost": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "shipping_cost"
        ]
      },
      {
        "id": "TEST_0073",
        "name": "Type validation for total_amount",
        "type": "negative",
        "description": "Testing wrong type for total_amount",
        "test_data": {
          "order_total_amount": "not_a_float"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "total_amount"
        ]
      },
      {
        "id": "TEST_0074",
        "name": "Type validation for discount_percentage",
        "type": "negative",
        "description": "Testing wrong type for discount_percentage",
        "test_data": {
          "order_discount_percentage": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "discount_percentage"
        ]
      },
      {
        "id": "TEST_0075",
        "name": "Type validation for order_date",
        "type": "negative",
        "description": "Testing wrong type for order_date",
        "test_data": {
          "order_order_date": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "order_date"
        ]
      },
      {
        "id": "TEST_0076",
        "name": "Type validation for shipping_date",
        "type": "negative",
        "description": "Testing wrong type for shipping_date",
        "test_data": {
          "order_shipping_date": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "shipping_date"
        ]
      },
      {
        "id": "TEST_0077",
        "name": "Type validation for delivery_date",
        "type": "negative",
        "description": "Testing wrong type for delivery_date",
        "test_data": {
          "order_delivery_date": "not_a_number"
        },
        "expected_result": "fail",
        "priority": 6,
        "tags": [
          "negative",
          "type_validation",
          "delivery_date"
        ]
      }
    ],
    "state_transition": [
      {
        "id": "TEST_0078",
        "name": "OrderLifecycle: pending -> paid",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "pending",
          "orderlifecycle_event": "payment_received",
          "orderlifecycle_expected_state": "paid",
          "order_total_amount": 1.45
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "orderlifecycle",
          "transition"
        ]
      },
      {
        "id": "TEST_0079",
        "name": "OrderLifecycle: pending -> cancelled",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "pending",
          "orderlifecycle_event": "cancel_order",
          "orderlifecycle_expected_state": "cancelled"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "orderlifecycle",
          "transition"
        ]
      },
      {
        "id": "TEST_0080",
        "name": "OrderLifecycle: paid -> processing",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "paid",
          "orderlifecycle_event": "start_processing",
          "orderlifecycle_expected_state": "processing"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "orderlifecycle",
          "transition"
        ]
      },
      {
        "id": "TEST_0081",
        "name": "OrderLifecycle: paid -> refunded",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "paid",
          "orderlifecycle_event": "refund_order",
          "orderlifecycle_expected_state": "refunded"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "orderlifecycle",
          "transition"
        ]
      },
      {
        "id": "TEST_0082",
        "name": "OrderLifecycle: processing -> shipped",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "processing",
          "orderlifecycle_event": "ship_order",
          "orderlifecycle_expected_state": "shipped",
          "order_shipping_date": "2025-07-11"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "orderlifecycle",
          "transition"
        ]
      },
      {
        "id": "TEST_0083",
        "name": "OrderLifecycle: shipped -> delivered",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "shipped",
          "orderlifecycle_event": "mark_delivered",
          "orderlifecycle_expected_state": "delivered",
          "order_delivery_date": "2025-07-11"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "orderlifecycle",
          "transition"
        ]
      },
      {
        "id": "TEST_0084",
        "name": "OrderLifecycle: shipped -> refunded",
        "type": "state_transition",
        "description": "Test state transition in OrderLifecycle",
        "test_data": {
          "orderlifecycle_current_state": "shipped",
          "orderlifecycle_event": "refund_after_shipping",
          "orderlifecycle_expected_state": "refunded"
        },
        "expected_result": "pass",
        "priority": 7,
        "tags": [
          "state_machine",
          "orderlifecycle",
          "transition"
        ]
      }
    ]
  }
}